1GetUserInfoByUsername

2GetTeacherInfo

3GetAllSemesters

4GetClassesBySemesterAndTeacher 	-- get_classes.php

5GetClassDetailsById			-- class_detail.php

6GetStudentsByClassId			-- export_excel, attendance_list, attendance_edit,
 
7GetSchedulesAndAttendanceByClassId

8GetDistinctDatesByClassId

10GetAttendanceByScheduleId

11UpdateOrInsertAttendance

12GetClassesBySemesterAndStudent

13GetStudentSchedules

14GetTeacherSchedules

15GetStudentsByClassIdAndStudentId 

16GetCoursePeriodsByClassId

17AddSchedules

18GetClassInfoById

19GetScheduleById

20GetAttendanceReportByClassId

21GetClassesBySemester

22GetTeacherById

23UpdateTeacherById

24RemoveStudentFromClass

25CheckStudentExistence

26InsertClassStudent

27GetAttendanceReports




-- 1. Thủ tục trong login.php
DELIMITER //
CREATE PROCEDURE GetUserInfoByUsername(IN input_username VARCHAR(255))
BEGIN
    SELECT u.user_id, u.username, u.password, r.role_name 
    FROM users u
    JOIN user_roles ur ON u.user_id = ur.user_id
    JOIN roles r ON ur.role_id = r.role_id
    WHERE u.username = input_username;
END //
DELIMITER ;

-- 2. Thủ tục lấy tên giảng viên trong teacher.php
DELIMITER //
CREATE PROCEDURE GetTeacherInfo(IN teacher_id_param INT)
BEGIN
    SELECT lastname, firstname 
    FROM teachers 
    WHERE teacher_id = teacher_id_param;
END //
DELIMITER ;

-- 3. Thủ tục lấy tất cả học kỳ
DELIMITER $$

CREATE OR REPLACE PROCEDURE GetAllSemesters()
BEGIN
    SELECT 
        s.semester_id,
        s.semester_name,
        s.start_date,
        s.end_date,
        s.is_active,
        COUNT(c.class_id) AS total_classes
    FROM 
        semesters s
    LEFT JOIN 
        classes c ON s.semester_id = c.semester_id
    GROUP BY 
        s.semester_id, s.semester_name, s.start_date, s.end_date, s.is_active;
END$$

DELIMITER ;


-- 4. Thủ tục lấy danh sach lớp theo học kỳ và giảng viên trong teacher.php(get_classes.php)
DELIMITER //
CREATE PROCEDURE GetClassesBySemesterAndTeacher(IN semester_id INT, IN teacher_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    WHERE c.semester_id = semester_id AND c.teacher_id = teacher_id;
END //
DELIMITER ;



-- 5.Thủ tục lấy thông tin lớp (detail_class.php)
DELIMITER //
CREATE PROCEDURE GetClassDetailsById(IN classId CHAR(36))
BEGIN
    SELECT 
        c.class_id,
        c.class_name,
        s.semester_name,
        co.course_name,
        CONCAT(t.lastname, ' ', t.firstname) AS teacher_fullname
    FROM 
        classes c
    JOIN 
        semesters s ON c.semester_id = s.semester_id
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        teachers t ON c.teacher_id = t.teacher_id
    WHERE 
        c.class_id = classId;
END //


----------------------------------------------------------------------- Attendance
-- 6. Thủ Tục Lấy Thông Tin Sinh Viên Trong Lớp -- (attendance_view.php)
DELIMITER //

CREATE PROCEDURE GetStudentsByClassId(IN classId CHAR(8))
BEGIN
    SELECT s.student_id, s.lastname, s.firstname, s.class, s.birthday, s.gender
    FROM students s
    JOIN class_students cs ON s.student_id = cs.student_id
    WHERE cs.class_id = classId;
END //

DELIMITER ;


-- 7. Lấy thông tin ngày điểm danh

DELIMITER $$

CREATE PROCEDURE GetSchedulesAndAttendanceByClassId(IN classId CHAR(8))
BEGIN
    SELECT 
        sch.schedule_id,
        sch.date, 
        a.student_id, 
        a.status 
    FROM schedules sch
    LEFT JOIN attendances a 
        ON sch.schedule_id = a.schedule_id 
        AND a.student_id IN (SELECT student_id FROM class_students WHERE class_id = classId)
    WHERE sch.class_id = classId;
END $$

DELIMITER ;






-- 8. Thủ Tục Lấy Danh Sách Ngày Điểm Danh
DELIMITER //

CREATE PROCEDURE GetDistinctDatesByClassId(IN classId CHAR(8))
BEGIN
    SELECT schedule_id, date
    FROM schedules
    WHERE class_id = classId;
END //

DELIMITER ;



--9
DELIMITER $$

CREATE PROCEDURE GetSchedulesAndAttendanceByClassId(IN classId CHAR(8))
BEGIN
    SELECT 
        sch.schedule_id,
        sch.date,
        a.student_id, 
        a.status 
    FROM schedules sch
    LEFT JOIN attendances a 
        ON sch.schedule_id = a.schedule_id 
        AND a.student_id IN (SELECT student_id FROM class_students WHERE class_id = classId)
    WHERE sch.class_id = classId;
END $$

DELIMITER ;







-- 10. Thủ Tục Lấy Thông Tin Điểm Danh
DELIMITER $$

CREATE PROCEDURE GetAttendanceByScheduleId(IN scheduleId INT, IN class_id CHAR(36))
BEGIN
    SELECT a.student_id, a.status
    FROM attendances a
    JOIN schedules s ON a.schedule_id = s.schedule_id
    WHERE a.schedule_id = scheduleId AND s.class_id = class_id;
END $$

DELIMITER ;




-- 11. Thủ tục cập nhật hoặc thêm mới điểm danh(process_attendance)
DELIMITER $$

CREATE PROCEDURE UpdateOrInsertAttendance(
    IN p_schedule_id INT,
    IN p_student_id INT,
    IN p_status INT
)
BEGIN
    DECLARE attendanceExists INT;
    
    -- Kiểm tra xem điểm danh đã tồn tại hay chưa
    SELECT COUNT(*) INTO attendanceExists
    FROM attendances
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
    
    IF attendanceExists > 0 THEN
        -- Nếu đã tồn tại, cập nhật trạng thái
        UPDATE attendances
        SET status = p_status
        WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
    ELSE
        -- Nếu chưa tồn tại, thêm mới
        INSERT INTO attendances (schedule_id, student_id, status)
        VALUES (p_schedule_id, p_student_id, p_status);
    END IF;
END$$

DELIMITER ;


-- 12. Thủ tục lấy danh sach lớp theo học kỳ và sinh viên trong student.php(get_classes.php)
DELIMITER //
CREATE PROCEDURE GetClassesBySemesterAndStudent(IN semester_id INT, IN student_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name,
        t.lastname,
        t.firstname
    FROM classes c
    JOIN class_students cs ON c.class_id = cs.class_id
    JOIN courses co ON c.course_id = co.course_id
    JOIN teachers t ON c.teacher_id = t.teacher_id
    WHERE c.semester_id = semester_id AND cs.student_id = student_id;
END //
DELIMITER ;


-- 13. Thủ tục lấy lịch học của sinh viên
DELIMITER //

CREATE PROCEDURE GetStudentSchedules(
    IN startDate DATETIME,
    IN endDate DATETIME,
    IN semesterId INT,
    IN student_id INT
)
BEGIN
    SELECT 
        c.class_name,
        co.course_name,
        s.date,
        s.start_time,
        s.end_time,
        CASE 
            WHEN s.end_time < 7 THEN 'Sáng'
            WHEN s.end_time >= 7 AND s.end_time < 13 THEN 'Chiều'
            ELSE 'Tối'
        END AS ca_hoc 
    FROM 
        schedules s
    JOIN 
        classes c ON s.class_id = c.class_id
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        class_students cs ON c.class_id = cs.class_id
    WHERE 
        DATE(s.date) BETWEEN DATE(startDate) AND DATE(endDate)
        AND c.semester_id = semesterId
        AND cs.student_id = student_id
    ORDER BY 
        s.date, c.class_name;
END //

DELIMITER ;

-- 14. Thủ tục lấy lịch dạy của giảng viên
DELIMITER //

CREATE PROCEDURE GetTeacherSchedules(
    IN startDate DATETIME,
    IN endDate DATETIME,
    IN semesterId INT,
    IN teacher_id INT
)
BEGIN
    SELECT 
        c.class_name,
        co.course_name,
        s.date,
        s.start_time,
        s.end_time,
        CASE 
            WHEN s.end_time < 7 THEN 'Sáng'
            WHEN s.end_time >= 7 AND s.end_time < 13 THEN 'Chiều'
            ELSE 'Tối'
        END AS ca_hoc 
    FROM 
        schedules s
    JOIN 
        classes c ON s.class_id = c.class_id
    JOIN 
        courses co ON c.course_id = co.course_id
    WHERE 
        DATE(s.date) BETWEEN DATE(startDate) AND DATE(endDate)  -- So sánh ngày
        AND c.semester_id = semesterId
        AND c.teacher_id = teacher_id  -- Lọc theo teacher_id
    ORDER BY 
        s.date, s.start_time;  -- Sắp xếp theo start_time (tăng dần)
END //

DELIMITER ;


 

-- 15. Thủ tục lấy thông tin sinh viên trong lớp
DELIMITER $$

CREATE PROCEDURE GetStudentsByClassIdAndStudentId (
    IN classId CHAR(36),
    IN studentId INT
)
BEGIN
    SELECT s.*
    FROM students s
    JOIN class_students cs ON s.student_id = cs.student_id
    WHERE cs.class_id = classId AND s.student_id = studentId;
END$$

DELIMITER ;


-- 16. Thủ Tục Lấy Thông Tin Tiết
DELIMITER $$

CREATE PROCEDURE GetCoursePeriodsByClassId(IN p_class_id CHAR(36))
BEGIN
    SELECT ct.theory_periods, ct.practice_periods
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    JOIN course_types ct ON co.course_type_id = ct.course_type_id
    WHERE c.class_id = p_class_id;
END$$

DELIMITER ;

-- 17. Thủ tục thêm lịch học
DELIMITER $$

CREATE PROCEDURE AddSchedules(
    IN p_class_id CHAR(36),
    IN p_dates TEXT,
    IN p_start_times TEXT,
    IN p_end_times TEXT
)
BEGIN
    DECLARE v_date VARCHAR(10);
    DECLARE v_start_time TIME;
    DECLARE v_end_time TIME;
    DECLARE done INT DEFAULT FALSE;

    DECLARE i INT DEFAULT 0;
    DECLARE n INT DEFAULT 0;

    -- Đếm số phần tử trong các chuỗi JSON
    SET n = JSON_LENGTH(p_dates);

    read_loop: LOOP
        -- Lấy giá trị từ JSON
        SET v_date = JSON_UNQUOTE(JSON_EXTRACT(p_dates, CONCAT('$[', i, ']')));
        SET v_start_time = JSON_UNQUOTE(JSON_EXTRACT(p_start_times, CONCAT('$[', i, ']')));
        SET v_end_time = JSON_UNQUOTE(JSON_EXTRACT(p_end_times, CONCAT('$[', i, ']')));

        -- Nếu i >= n, kết thúc vòng lặp
        IF i >= n THEN
            LEAVE read_loop;
        END IF;

        -- Thêm lịch học vào bảng schedules
        INSERT INTO schedules (class_id, date, start_time, end_time) VALUES (p_class_id, v_date, v_start_time, v_end_time);

        SET i = i + 1; -- Tăng chỉ số
    END LOOP;

END$$

DELIMITER ;


--18 thủ tục xem lịch học
DELIMITER //

CREATE PROCEDURE GetClassInfoById(IN classId CHAR(8))
BEGIN
    SELECT 
        c.class_name, 
        co.course_name, 
        CONCAT(t.lastname, ' ', t.firstname) AS teacher_fullname,
        s.semester_name 
    FROM 
        classes c
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        teachers t ON c.teacher_id = t.teacher_id
    JOIN 
        semesters s ON c.semester_id = s.semester_id
    WHERE 
        c.class_id = classId;
END //

DELIMITER ;


--Fix table: GetSchedulesByClassId
DELIMITER //

CREATE PROCEDURE GetSchedulesByClassId(IN classId CHAR(36))
BEGIN
    SELECT 
        sch.schedule_id,
        sch.date,
        sch.start_time,
        sch.end_time
    FROM schedules sch
    WHERE sch.class_id = classId;
END
DELIMITER ;


--19 thủ tục QR
DELIMITER //
CREATE PROCEDURE GetScheduleById(IN schedule_id INT)
BEGIN
    SELECT * FROM schedules WHERE id = schedule_id;
END //
DELIMITER ;


--20
DELIMITER $$

CREATE PROCEDURE GetAttendanceReportByClassId(IN input_class_id CHAR(36))
BEGIN
    SELECT 
        ar.student_id,
        ar.total_present,
        ar.total_absent,
        ar.total_late
    FROM 
        attendance_reports ar
    WHERE 
        ar.class_id = input_class_id;
END $$

DELIMITER ;

-- 21
DELIMITER //
CREATE PROCEDURE GetClassesBySemester(IN semester_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name,
        t.lastname, 
        t.firstname
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    JOIN teachers t ON c.teacher_id = t.teacher_id
    WHERE c.semester_id = semester_id;
END //
DELIMITER ;


-- 22
DELIMITER $$

CREATE PROCEDURE GetTeacherById(IN teacherId INT)
BEGIN
    SELECT * 
    FROM teachers 
    WHERE teacher_id = teacherId;
END $$

DELIMITER ;

-- 23
DELIMITER $$

CREATE PROCEDURE UpdateTeacherById(
    IN teacherId INT,
    IN lastname VARCHAR(100),
    IN firstname VARCHAR(100),
    IN birthday DATE,
    IN gender ENUM('Male', 'Female'),
    IN email VARCHAR(255),
    IN phone VARCHAR(20)
)
BEGIN
    UPDATE teachers
    SET 
        lastname = lastname,
        firstname = firstname,
        birthday = birthday,
        gender = gender,
        email = email,
        phone = phone
    WHERE teacher_id = teacherId;
END $$

DELIMITER ;

-- 24
DELIMITER $$

CREATE PROCEDURE RemoveStudentFromClass(
    IN classId INT,
    IN studentId INT
)
BEGIN
    DELETE FROM class_students 
    WHERE class_id = classId AND student_id = studentId;
END $$

DELIMITER ;

-- 25
DELIMITER $$

CREATE PROCEDURE CheckStudentExistence(
    IN p_class_id INT,
    IN p_student_id INT,
    OUT p_exists INT
)
BEGIN
    -- Check if student_id exists for the given class_id
    SELECT COUNT(*) INTO p_exists
    FROM class_students
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 26
DELIMITER $$

CREATE PROCEDURE InsertClassStudent(IN p_class_id CHAR(36), IN p_student_id INT)
BEGIN
    IF NOT EXISTS (SELECT 1 FROM class_students WHERE class_id = p_class_id AND student_id = p_student_id) THEN
        -- Nếu chưa tồn tại, chèn dữ liệu mới vào bảng class_students
        INSERT INTO class_students (class_id, student_id, status)
        VALUES (p_class_id, p_student_id, 0);
    END IF;
END $$

DELIMITER ;


--27
DELIMITER $$

CREATE PROCEDURE GetAttendanceReports(IN p_class_id CHAR(36))
BEGIN
    SELECT student_id, total_present, total_late, total_absent
    FROM attendance_reports
    WHERE class_id = p_class_id;
END $$

DELIMITER ;


-- 28
DELIMITER $$

CREATE PROCEDURE UpdateSchedule(IN p_date DATE, IN p_start_time TIME, IN p_end_time TIME, IN p_schedule_id CHAR(36))
BEGIN
    UPDATE schedules
    SET date = p_date, start_time = p_start_time, end_time = p_end_time
    WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 29
DELIMITER $$

CREATE PROCEDURE UpdateClass(
    IN p_class_name VARCHAR(255),
    IN p_course_id CHAR(36),
    IN p_semester_id CHAR(36),
    IN p_class_id CHAR(36),
    IN p_teacher_id CHAR(36)
)
BEGIN
    UPDATE classes
    SET class_name = p_class_name,
        course_id = p_course_id,
        semester_id = p_semester_id
    WHERE class_id = p_class_id AND teacher_id = p_teacher_id;
END $$

DELIMITER ;

-- 30
DELIMITER $$

CREATE PROCEDURE DeleteSchedule(IN p_schedule_id CHAR(36))
BEGIN
    DELETE FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;



-- 31
DELIMITER $$

CREATE PROCEDURE DeleteClass(IN p_class_id CHAR(36))
BEGIN
    DELETE FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 32
DELIMITER $$

CREATE PROCEDURE GetClassByTeacher(IN p_class_id CHAR(36), IN p_teacher_id CHAR(36))
BEGIN
    SELECT * FROM classes WHERE class_id = p_class_id AND teacher_id = p_teacher_id;
END $$

DELIMITER ;

-- 32
DELIMITER $$

CREATE PROCEDURE GetAllCourses()
BEGIN
    SELECT * FROM courses;
END $$

DELIMITER ;

