1GetUserInfoByUsername

2GetTeacherInfo

3GetAllSemesters

4GetClassesBySemesterAndTeacher

5GetClassDetailsById

6GetStudentsByClassId
 
7GetSchedulesAndAttendanceByClassId

8GetDistinctDatesByClassId

10GetAttendanceByScheduleId

11UpdateOrInsertAttendance

12GetClassesBySemesterAndStudent

13GetStudentSchedules

14GetTeacherSchedules

15GetStudentsByClassIdAndStudentId 

16GetCoursePeriodsByClassId

17AddSchedules

18GetClassInfoById

19GetScheduleById

20GetAttendanceReportByClassId

21GetClassesBySemester

22GetTeacherById

23UpdateTeacherById

24RemoveStudentFromClass

25CheckStudentExistence

26InsertClassStudent

27GetAttendanceReports

28


-- 1. Thủ tục trong login.php
DELIMITER //
CREATE PROCEDURE GetUserInfoByUsername(IN input_username VARCHAR(255))
BEGIN
    SELECT u.user_id, u.username, u.password, r.role_name 
    FROM users u
    JOIN user_roles ur ON u.user_id = ur.user_id
    JOIN roles r ON ur.role_id = r.role_id
    WHERE u.username = input_username;
END //
DELIMITER ;

-- 2. Thủ tục lấy tên giảng viên trong teacher.php
DELIMITER //
CREATE PROCEDURE GetTeacherInfo(IN teacher_id_param INT)
BEGIN
    SELECT lastname, firstname 
    FROM teachers 
    WHERE teacher_id = teacher_id_param;
END //
DELIMITER ;

-- 3. Thủ tục lấy tất cả học kỳ
DELIMITER $$

CREATE OR REPLACE PROCEDURE GetAllSemesters()
BEGIN
    SELECT 
        s.semester_id,
        s.semester_name,
        s.start_date,
        s.end_date,
        s.is_active,
        COUNT(c.class_id) AS total_classes
    FROM 
        semesters s
    LEFT JOIN 
        classes c ON s.semester_id = c.semester_id
    GROUP BY 
        s.semester_id, s.semester_name, s.start_date, s.end_date, s.is_active;
END$$

DELIMITER ;


-- 4. Thủ tục lấy danh sach lớp theo học kỳ và giảng viên trong teacher.php(get_classes.php)
DELIMITER //
CREATE PROCEDURE GetClassesBySemesterAndTeacher(IN semester_id INT, IN teacher_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    WHERE c.semester_id = semester_id AND c.teacher_id = teacher_id;
END //
DELIMITER ;



-- 5.Thủ tục lấy thông tin lớp (detail_class.php)
DELIMITER //
CREATE PROCEDURE GetClassDetailsById(IN classId CHAR(36))
BEGIN
    SELECT 
        c.class_id,
        c.class_name,
        s.semester_name,
        co.course_name,
        CONCAT(t.lastname, ' ', t.firstname) AS teacher_fullname
    FROM 
        classes c
    JOIN 
        semesters s ON c.semester_id = s.semester_id
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        teachers t ON c.teacher_id = t.teacher_id
    WHERE 
        c.class_id = classId;
END //


----------------------------------------------------------------------- Attendance
-- 6. Thủ Tục Lấy Thông Tin Sinh Viên Trong Lớp -- (attendance_view.php)
DELIMITER //

CREATE PROCEDURE GetStudentsByClassId(IN classId CHAR(8))
BEGIN
    SELECT s.student_id, s.lastname, s.firstname, s.class, s.birthday, s.gender
    FROM students s
    JOIN class_students cs ON s.student_id = cs.student_id
    WHERE cs.class_id = classId;
END //

DELIMITER ;


-- 7. Lấy thông tin ngày điểm danh

DELIMITER $$

CREATE PROCEDURE GetSchedulesAndAttendanceByClassId(IN classId CHAR(8))
BEGIN
    SELECT 
        sch.schedule_id,
        sch.date, 
        a.student_id, 
        a.status 
    FROM schedules sch
    LEFT JOIN attendances a 
        ON sch.schedule_id = a.schedule_id 
        AND a.student_id IN (SELECT student_id FROM class_students WHERE class_id = classId)
    WHERE sch.class_id = classId;
END $$

DELIMITER ;






-- 8. Thủ Tục Lấy Danh Sách Ngày Điểm Danh
DELIMITER //

CREATE PROCEDURE GetDistinctDatesByClassId(IN classId CHAR(8))
BEGIN
    SELECT schedule_id, date
    FROM schedules
    WHERE class_id = classId;
END //

DELIMITER ;



--9
DELIMITER $$

CREATE PROCEDURE GetSchedulesAndAttendanceByClassId(IN classId CHAR(8))
BEGIN
    SELECT 
        sch.schedule_id,
        sch.date,
        a.student_id, 
        a.status 
    FROM schedules sch
    LEFT JOIN attendances a 
        ON sch.schedule_id = a.schedule_id 
        AND a.student_id IN (SELECT student_id FROM class_students WHERE class_id = classId)
    WHERE sch.class_id = classId;
END $$

DELIMITER ;







-- 10. Thủ Tục Lấy Thông Tin Điểm Danh
DELIMITER $$

CREATE PROCEDURE GetAttendanceByScheduleId(IN scheduleId INT, IN class_id CHAR(36))
BEGIN
    SELECT a.student_id, a.status
    FROM attendances a
    JOIN schedules s ON a.schedule_id = s.schedule_id
    WHERE a.schedule_id = scheduleId AND s.class_id = class_id;
END $$

DELIMITER ;




-- 11. Thủ tục cập nhật hoặc thêm mới điểm danh(process_attendance)
DELIMITER $$

CREATE PROCEDURE UpdateOrInsertAttendance(
    IN p_schedule_id INT,
    IN p_student_id INT,
    IN p_status INT
)
BEGIN
    DECLARE attendanceExists INT;
    
    -- Kiểm tra xem điểm danh đã tồn tại hay chưa
    SELECT COUNT(*) INTO attendanceExists
    FROM attendances
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
    
    IF attendanceExists > 0 THEN
        -- Nếu đã tồn tại, cập nhật trạng thái
        UPDATE attendances
        SET status = p_status
        WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
    ELSE
        -- Nếu chưa tồn tại, thêm mới
        INSERT INTO attendances (schedule_id, student_id, status)
        VALUES (p_schedule_id, p_student_id, p_status);
    END IF;
END$$

DELIMITER ;


-- 12. Thủ tục lấy danh sach lớp theo học kỳ và sinh viên trong student.php(get_classes.php)
DELIMITER //
CREATE PROCEDURE GetClassesBySemesterAndStudent(IN semester_id INT, IN student_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name,
        t.lastname,
        t.firstname
    FROM classes c
    JOIN class_students cs ON c.class_id = cs.class_id
    JOIN courses co ON c.course_id = co.course_id
    JOIN teachers t ON c.teacher_id = t.teacher_id
    WHERE c.semester_id = semester_id AND cs.student_id = student_id;
END //
DELIMITER ;


-- 13. Thủ tục lấy lịch học của sinh viên
DELIMITER //

CREATE PROCEDURE GetStudentSchedules(
    IN startDate DATETIME,
    IN endDate DATETIME,
    IN semesterId INT,
    IN student_id INT
)
BEGIN
    SELECT 
        c.class_name,
        co.course_name,
        s.date,
        s.start_time,
        s.end_time,
        CASE 
            WHEN s.end_time < 7 THEN 'Sáng'
            WHEN s.end_time >= 7 AND s.end_time < 13 THEN 'Chiều'
            ELSE 'Tối'
        END AS ca_hoc 
    FROM 
        schedules s
    JOIN 
        classes c ON s.class_id = c.class_id
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        class_students cs ON c.class_id = cs.class_id
    WHERE 
        DATE(s.date) BETWEEN DATE(startDate) AND DATE(endDate)
        AND c.semester_id = semesterId
        AND cs.student_id = student_id
    ORDER BY 
        s.date, c.class_name;
END //

DELIMITER ;

-- 14. Thủ tục lấy lịch dạy của giảng viên
DELIMITER //

CREATE PROCEDURE GetTeacherSchedules(
    IN startDate DATETIME,
    IN endDate DATETIME,
    IN semesterId INT,
    IN teacher_id INT
)
BEGIN
    SELECT 
        c.class_name,
        co.course_name,
        s.date,
        s.start_time,
        s.end_time,
        CASE 
            WHEN s.end_time < 7 THEN 'Sáng'
            WHEN s.end_time >= 7 AND s.end_time < 13 THEN 'Chiều'
            ELSE 'Tối'
        END AS ca_hoc 
    FROM 
        schedules s
    JOIN 
        classes c ON s.class_id = c.class_id
    JOIN 
        courses co ON c.course_id = co.course_id
    WHERE 
        DATE(s.date) BETWEEN DATE(startDate) AND DATE(endDate)  -- So sánh ngày
        AND c.semester_id = semesterId
        AND c.teacher_id = teacher_id  -- Lọc theo teacher_id
    ORDER BY 
        s.date, s.start_time;  -- Sắp xếp theo start_time (tăng dần)
END //

DELIMITER ;


 

-- 15. Thủ tục lấy thông tin sinh viên trong lớp
DELIMITER $$

CREATE PROCEDURE GetStudentsByClassIdAndStudentId (
    IN classId CHAR(36),
    IN studentId INT
)
BEGIN
    SELECT s.*
    FROM students s
    JOIN class_students cs ON s.student_id = cs.student_id
    WHERE cs.class_id = classId AND s.student_id = studentId;
END$$

DELIMITER ;


-- 16. Thủ Tục Lấy Thông Tin Tiết
DELIMITER $$

CREATE PROCEDURE GetCoursePeriodsByClassId(IN p_class_id CHAR(36))
BEGIN
    SELECT ct.theory_periods, ct.practice_periods
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    JOIN course_types ct ON co.course_type_id = ct.course_type_id
    WHERE c.class_id = p_class_id;
END$$

DELIMITER ;

-- 17. Thủ tục thêm lịch học
DELIMITER $$

CREATE PROCEDURE AddSchedules(
    IN p_class_id CHAR(36),
    IN p_dates TEXT,
    IN p_start_times TEXT,
    IN p_end_times TEXT
)
BEGIN
    DECLARE v_date VARCHAR(10);
    DECLARE v_start_time TIME;
    DECLARE v_end_time TIME;
    DECLARE done INT DEFAULT FALSE;

    DECLARE i INT DEFAULT 0;
    DECLARE n INT DEFAULT 0;

    -- Đếm số phần tử trong các chuỗi JSON
    SET n = JSON_LENGTH(p_dates);

    read_loop: LOOP
        -- Lấy giá trị từ JSON
        SET v_date = JSON_UNQUOTE(JSON_EXTRACT(p_dates, CONCAT('$[', i, ']')));
        SET v_start_time = JSON_UNQUOTE(JSON_EXTRACT(p_start_times, CONCAT('$[', i, ']')));
        SET v_end_time = JSON_UNQUOTE(JSON_EXTRACT(p_end_times, CONCAT('$[', i, ']')));

        -- Nếu i >= n, kết thúc vòng lặp
        IF i >= n THEN
            LEAVE read_loop;
        END IF;

        -- Thêm lịch học vào bảng schedules
        INSERT INTO schedules (class_id, date, start_time, end_time) VALUES (p_class_id, v_date, v_start_time, v_end_time);

        SET i = i + 1; -- Tăng chỉ số
    END LOOP;

END$$

DELIMITER ;


--18 thủ tục xem lịch học
DELIMITER //

CREATE PROCEDURE GetClassInfoById(IN classId CHAR(8))
BEGIN
    SELECT 
        c.class_name, 
        co.course_name, 
        CONCAT(t.lastname, ' ', t.firstname) AS teacher_fullname,
        s.semester_name 
    FROM 
        classes c
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        teachers t ON c.teacher_id = t.teacher_id
    JOIN 
        semesters s ON c.semester_id = s.semester_id
    WHERE 
        c.class_id = classId;
END //

DELIMITER ;


--Fix table: GetSchedulesByClassId
DELIMITER //

CREATE PROCEDURE GetSchedulesByClassId(IN classId CHAR(36))
BEGIN
    SELECT 
        sch.schedule_id,
        sch.date,
        sch.start_time,
        sch.end_time
    FROM schedules sch
    WHERE sch.class_id = classId;
END
DELIMITER ;


--19 thủ tục QR
DELIMITER //
CREATE PROCEDURE GetScheduleById(IN schedule_id INT)
BEGIN
    SELECT * FROM schedules WHERE id = schedule_id;
END //
DELIMITER ;


--20
DELIMITER $$

CREATE PROCEDURE GetAttendanceReportByClassId(IN input_class_id CHAR(36))
BEGIN
    SELECT 
        ar.student_id,
        ar.total_present,
        ar.total_absent,
        ar.total_late
    FROM 
        attendance_reports ar
    WHERE 
        ar.class_id = input_class_id;
END $$

DELIMITER ;

-- 21
DELIMITER //
CREATE PROCEDURE GetClassesBySemester(IN semester_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name,
        t.lastname, 
        t.firstname
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    JOIN teachers t ON c.teacher_id = t.teacher_id
    WHERE c.semester_id = semester_id;
END //
DELIMITER ;


-- 22
DELIMITER $$

CREATE PROCEDURE GetTeacherById(IN teacherId INT)
BEGIN
    SELECT * 
    FROM teachers 
    WHERE teacher_id = teacherId;
END $$

DELIMITER ;

-- 23
DELIMITER $$

CREATE PROCEDURE UpdateTeacherById(
    IN teacherId INT,
    IN lastname VARCHAR(100),
    IN firstname VARCHAR(100),
    IN birthday DATE,
    IN gender ENUM('Male', 'Female'),
    IN email VARCHAR(255),
    IN phone VARCHAR(20)
)
BEGIN
    UPDATE teachers
    SET 
        lastname = lastname,
        firstname = firstname,
        birthday = birthday,
        gender = gender,
        email = email,
        phone = phone
    WHERE teacher_id = teacherId;
END $$

DELIMITER ;

-- 24
DELIMITER $$

CREATE PROCEDURE RemoveStudentFromClass(
    IN classId INT,
    IN studentId INT
)
BEGIN
    DELETE FROM class_students 
    WHERE class_id = classId AND student_id = studentId;
END $$

DELIMITER ;

-- 25
DELIMITER $$

CREATE PROCEDURE CheckClassStudentExistence(
    IN p_class_id INT,
    IN p_student_id INT,
    OUT p_exists INT
)
BEGIN
    -- Check if student_id exists for the given class_id
    SELECT COUNT(*) INTO p_exists
    FROM class_students
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 26
DELIMITER $$

CREATE PROCEDURE InsertClassStudent(IN p_class_id CHAR(36), IN p_student_id INT)
BEGIN
    IF NOT EXISTS (SELECT 1 FROM class_students WHERE class_id = p_class_id AND student_id = p_student_id) THEN
        -- Nếu chưa tồn tại, chèn dữ liệu mới vào bảng class_students
        INSERT INTO class_students (class_id, student_id, status)
        VALUES (p_class_id, p_student_id, 0);
    END IF;
END $$

DELIMITER ;


--27
DELIMITER $$

CREATE PROCEDURE GetAttendanceReports(IN p_class_id CHAR(36))
BEGIN
    SELECT student_id, total_present, total_late, total_absent
    FROM attendance_reports
    WHERE class_id = p_class_id;
END $$

DELIMITER ;


-- 28
DELIMITER $$

CREATE PROCEDURE UpdateSchedule(IN p_date DATE, IN p_start_time TIME, IN p_end_time TIME, IN p_schedule_id CHAR(36))
BEGIN
    UPDATE schedules
    SET date = p_date, start_time = p_start_time, end_time = p_end_time
    WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 29
DELIMITER $$

CREATE PROCEDURE UpdateClass(
    IN p_class_name VARCHAR(255),
    IN p_course_id CHAR(36),
    IN p_semester_id CHAR(36),
    IN p_class_id CHAR(36),
    IN p_teacher_id CHAR(36)
)
BEGIN
    UPDATE classes
    SET class_name = p_class_name,
        course_id = p_course_id,
        semester_id = p_semester_id
    WHERE class_id = p_class_id AND teacher_id = p_teacher_id;
END $$

DELIMITER ;

-- 30
DELIMITER $$

CREATE PROCEDURE DeleteSchedule(IN p_schedule_id CHAR(36))
BEGIN
    DELETE FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;



-- 31
DELIMITER $$

CREATE PROCEDURE DeleteClass(IN p_class_id CHAR(36))
BEGIN
    DELETE FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 32
DELIMITER $$

CREATE PROCEDURE GetClassByTeacher(IN p_class_id CHAR(36), IN p_teacher_id CHAR(36))
BEGIN
    SELECT * FROM classes WHERE class_id = p_class_id AND teacher_id = p_teacher_id;
END $$

DELIMITER ;

-- 33
DELIMITER $$

CREATE PROCEDURE GetAllCourses()
BEGIN
    SELECT * FROM courses;
END $$

DELIMITER ;


-- 34
DELIMITER $$

CREATE PROCEDURE InsertClass(
    IN className VARCHAR(255),
    IN courseId INT,
    IN semesterId INT,
    IN teacherId INT
)
BEGIN
    INSERT INTO classes (class_name, course_id, semester_id, teacher_id)
    VALUES (className, courseId, semesterId, teacherId);
END $$

DELIMITER ;

-- 35
DELIMITER $$

CREATE PROCEDURE GetLatestClassId(
    IN className VARCHAR(255),
    IN teacherId INT
)
BEGIN
    SELECT class_id 
    FROM classes 
    WHERE class_name = className AND teacher_id = teacherId 
    ORDER BY class_id DESC 
    LIMIT 1;
END $$

DELIMITER ;

-- 36
DELIMITER $$

CREATE PROCEDURE CheckStudentExistence(
    IN p_student_id INT,
    OUT p_exists INT
)
BEGIN
    -- Kiểm tra sự tồn tại của student_id trong bảng students
    SELECT COUNT(*) INTO p_exists
    FROM students
    WHERE student_id = p_student_id;
END $$

DELIMITER ;

-- 37
DELIMITER $$

CREATE PROCEDURE UpdateScheduleStatus(
    IN p_schedule_id INT,
    IN p_status TINYINT(1)
)
BEGIN
    -- Cập nhật trạng thái của lịch học
    UPDATE schedules
    SET status = p_status
    WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 38
DELIMITER $$

CREATE PROCEDURE GetSchedulesBeforeToday(
    IN p_class_id CHAR(36)
)
BEGIN
    -- Lấy các buổi học không phải trong tương lai
    SELECT schedule_id, date
    FROM schedules
    WHERE class_id = p_class_id AND date <= CURDATE();
END $$

DELIMITER ;

-- 39
DELIMITER $$

CREATE PROCEDURE GetAttendanceSummary(
    IN p_class_id CHAR(36)
)
BEGIN
    -- Lấy tổng số buổi có mặt, muộn và vắng mặt
    SELECT 
        SUM(r.total_present) AS total_present,
        SUM(r.total_late) AS total_late,
        SUM(r.total_absent) AS total_absent
    FROM attendance_reports r
    WHERE r.class_id = p_class_id;
END $$

DELIMITER ;

-- 40
DELIMITER $$

CREATE PROCEDURE UpdateScheduleDate(
    IN p_date DATETIME,
    IN p_schedule_id INT
)
BEGIN
    UPDATE schedules
    SET date = p_date
    WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;



-- 41
DELIMITER $$

CREATE PROCEDURE GetScheduleDateById(
    IN p_schedule_id INT
)
BEGIN
    -- Truy vấn ngày của lịch học dựa trên schedule_id
    SELECT date
    FROM schedules
    WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;



 
-- 42 thủ tục lấy thông tin
DELIMITER $$

CREATE PROCEDURE GetStudentById(IN student_id_param INT)
BEGIN
    SELECT * FROM students WHERE student_id = student_id_param;
END $$

DELIMITER ;

-- 43 thủ tục cập nhật thông tin
DELIMITER $$

CREATE PROCEDURE UpdateStudentInfo(
    IN p_student_id INT,
    IN p_lastname VARCHAR(50),
    IN p_firstname VARCHAR(50),
    IN p_birthday DATE,
    IN p_gender ENUM('Nam', 'Nữ'),
    IN p_email VARCHAR(100),
    IN p_phone VARCHAR(15)
)
BEGIN
    UPDATE students 
    SET 
        lastname = p_lastname,
        firstname = p_firstname,
        birthday = p_birthday,
        gender = p_gender,
        email = p_email,
        phone = p_phone
    WHERE 
        student_id = p_student_id;
END $$

DELIMITER ;

-- 44 thủ tục kiểm tra xem class_id có tồn tại không
DELIMITER $$

CREATE PROCEDURE GetClassById(IN p_class_id CHAR(36))
BEGIN
    SELECT class_id FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 45 thủ tục kiểm tra sinh viên đã tham gia lớp học này chưa
DELIMITER $$

CREATE PROCEDURE GetStudentClassStatus(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    SELECT status FROM class_students 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 46 thủ tục nếu chưa kích hoạt, cập nhật status thành 1
DELIMITER $$

CREATE PROCEDURE UpdateStudentClassStatus(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    UPDATE class_students 
    SET status = 1 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 47 thủ tục lấy thông tin điểm danh của sinh viên trong lớp
DELIMITER $$

CREATE PROCEDURE GetAttendanceReport(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    SELECT total_present, total_absent, total_late, total 
    FROM attendance_reports 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 48 thủ tục cập nhật trạng thái lớp học thành 0
DELIMITER $$

CREATE PROCEDURE UpdateStudentClassStatusToInactive(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    UPDATE class_students 
    SET status = 0 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 49 thủ tục lấy thông tin ngày giờ buổi học từ bảng schedules
DELIMITER $$

CREATE PROCEDURE GetScheduleDate(
    IN p_schedule_id INT
)
BEGIN
    SELECT date FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 50 thủ tục kiểm tra xem điểm danh đã tồn tại hay chưa
DELIMITER $$

CREATE PROCEDURE GetAttendanceRecord(
    IN p_schedule_id INT,
    IN p_student_id INT
)
BEGIN
    SELECT * FROM attendances 
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 51 thủ tục nếu đã tồn tại, cập nhật trạng thái
DELIMITER $$

CREATE PROCEDURE UpdateAttendanceStatus(
    IN p_status TINYINT,
    IN p_schedule_id INT,
    IN p_student_id INT
)
BEGIN
    UPDATE attendances 
    SET status = p_status 
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 52 thủ tục nếu chưa tồn tại, thêm mới
DELIMITER $$

CREATE PROCEDURE InsertAttendanceRecord(
    IN p_schedule_id INT,
    IN p_student_id INT,
    IN p_status TINYINT
)
BEGIN
    INSERT INTO attendances (schedule_id, student_id, status) 
    VALUES (p_schedule_id, p_student_id, p_status);
END $$

DELIMITER ;

-- 53 thủ tục lấy thông tin lớp học
DELIMITER $$

CREATE PROCEDURE GetClassNameById(
    IN p_class_id CHAR(8)
)
BEGIN
    SELECT class_name FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 54 thủ tục lấy thông tin status và date của lịch học
DELIMITER $$

CREATE PROCEDURE GetScheduleStatusAndDate(
    IN p_schedule_id INT
)
BEGIN
    SELECT status, date FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 55 thủ tục kiểm tra xem nội dung bình luận có rỗng không
DELIMITER $$

CREATE PROCEDURE InsertComment(
    IN p_announcement_id INT,
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO comments (announcement_id, user_id, content) 
    VALUES (p_announcement_id, p_user_id, p_content);
END $$

DELIMITER ;


------ Account ------ 
-- 56 thủ tục lấy tất cả người dùng với mật khẩu hiện tại
DELIMITER $$

CREATE PROCEDURE GetAllUsers()
BEGIN
    SELECT user_id, password FROM users;
END $$

DELIMITER ;

-- 57 thủ tục cập nhật mật khẩu đã mã hóa vào cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE UpdateUserPassword(
    IN p_hashed_password VARCHAR(255),
    IN p_user_id INT
)
BEGIN
    UPDATE users 
    SET password = p_hashed_password 
    WHERE user_id = p_user_id;
END $$

DELIMITER ;

-- 58 thủ tục Check current password
DELIMITER $$

CREATE PROCEDURE GetPasswordByUsername(
    IN p_username VARCHAR(255)
)
BEGIN
    SELECT password FROM users WHERE username = p_username;
END $$

DELIMITER ;

-- 59 thủ tục kiểm tra nếu username (tên đăng nhập) và email tồn tại và khớp trong bảng sinh viên hoặc giáo viên
DELIMITER $$

CREATE PROCEDURE GetUserByEmailAndUsername(
    IN p_email VARCHAR(255),
    IN p_username VARCHAR(255)
)
BEGIN
    SELECT 'student' AS user_type, student_id AS id, email 
    FROM db_atd.students 
    WHERE email = p_email 
      AND student_id = (SELECT user_id FROM db_atd.users WHERE username = p_username)
    UNION
    SELECT 'teacher' AS user_type, teacher_id AS id, email 
    FROM db_atd.teachers 
    WHERE email = p_email 
      AND teacher_id = (SELECT user_id FROM db_atd.users WHERE username = p_username);
END $$

DELIMITER ;

-- 60 thủ tục để lấy danh sách lịch dạy của giảng viên vào ngày mai
DELIMITER $$

CREATE PROCEDURE GetTeachingSchedulesByDate(
    IN p_date DATE
)
BEGIN
    SELECT t.email, t.firstname, t.lastname, s.date, s.start_time, s.end_time, c.class_name
    FROM teachers t
    JOIN classes c ON t.teacher_id = c.teacher_id
    JOIN schedules s ON c.class_id = s.class_id
    WHERE s.date = p_date
    ORDER BY t.email, s.start_time;
END $$

DELIMITER ;

-- 61 thủ tục để lấy danh sách lịch học của sinh viên vào ngày mai
DELIMITER $$

CREATE PROCEDURE GetStudentSchedulesByDate(
    IN p_date DATE
)
BEGIN
    SELECT students.email, students.firstname, schedules.date, schedules.start_time, schedules.end_time 
    FROM students
    JOIN attendances ON students.student_id = attendances.student_id
    JOIN schedules ON schedules.schedule_id = attendances.schedule_id
    WHERE schedules.date = p_date
    ORDER BY students.email, schedules.start_time;
END $$

DELIMITER ;


------ Teacher------ 

-- 62 thủ tục kiểm tra xem nội dung bình luận có rỗng không
DELIMITER $$

CREATE PROCEDURE AddComment(
    IN p_announcement_id INT,
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO comments (announcement_id, user_id, content) VALUES (p_announcement_id, p_user_id, p_content);
END $$

DELIMITER ;

-- 63 thủ tục Truy vấn bảng tin
DELIMITER $$

CREATE PROCEDURE GetAnnouncementsByClass(
    IN p_class_id INT
)
BEGIN
    SELECT * FROM announcements WHERE class_id = p_class_id ORDER BY created_at DESC;
END $$

DELIMITER ;

-- 64 thủ tục Kiểm tra nếu có bình luận
DELIMITER $$

CREATE PROCEDURE GetCommentCountByAnnouncement(
    IN p_announcement_id INT,
    OUT p_comment_count INT
)
BEGIN
    SELECT COUNT(*) INTO p_comment_count FROM comments WHERE announcement_id = p_announcement_id;
END $$

DELIMITER ;

-- 65 thủ tục GetCommentsByAnnouncement bình luận
DELIMITER $$

CREATE PROCEDURE GetCommentsByAnnouncement(
    IN p_announcement_id INT
)
BEGIN
    SELECT c.*, 
           COALESCE(t.lastname, s.lastname) AS lastname, 
           COALESCE(t.firstname, s.firstname) AS firstname
    FROM comments c
    LEFT JOIN teachers t ON c.user_id = t.teacher_id
    LEFT JOIN students s ON c.user_id = s.student_id
    WHERE c.announcement_id = p_announcement_id
    ORDER BY c.created_at ASC;
END $$

DELIMITER ;

-- 66 thủ tục lưu thông báo vào cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE AddAnnouncement(
    IN p_class_id CHAR(8),
    IN p_title VARCHAR(255),
    IN p_content TEXT
)
BEGIN
    INSERT INTO announcements (class_id, title, content) VALUES (p_class_id, p_title, p_content);
END $$

DELIMITER ;

-- 67 thủ tục Truy vấn xóa thông báo
DELIMITER $$

CREATE PROCEDURE DeleteAnnouncement(
    IN p_announcement_id INT,
    IN p_class_id INT
)
BEGIN
    DELETE FROM announcements WHERE announcement_id = p_announcement_id AND class_id = p_class_id;
END $$

DELIMITER ;

-- 68 thủ tục UpdateAnnouncementContent
DELIMITER $$

CREATE PROCEDURE UpdateAnnouncementContent(
    IN p_announcement_id INT,
    IN p_content TEXT
)
BEGIN
    UPDATE announcements SET content = p_content WHERE announcement_id = p_announcement_id;
END $$

DELIMITER ;

-- 69 thủ tục UpdateAnnouncementTitle
DELIMITER $$

CREATE PROCEDURE UpdateAnnouncementTitle(
    IN p_announcement_id INT,
    IN p_title VARCHAR(255)
)
BEGIN
    UPDATE announcements SET title = p_title WHERE announcement_id = p_announcement_id;
END $$

DELIMITER ;


------ Admin ------ 

-- 70 thủ tục Truy vấn tổng số khóa học
DELIMITER $$

CREATE PROCEDURE GetTotalCoursesCount(
    OUT p_total INT
)
BEGIN
    SELECT COUNT(*) INTO p_total FROM courses;
END $$

DELIMITER ;

-- 71 thủ tục Truy vấn danh sách khóa học với giới hạn số lượng
DELIMITER $$

CREATE PROCEDURE GetCourses(
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    SELECT 
        c.course_id,
        c.course_name,
        ct.course_type_name,
        ct.credits,
        ct.theory_periods,
        ct.practice_periods
    FROM 
        courses c
    LEFT JOIN 
        course_types ct ON c.course_type_id = ct.course_type_id
    LIMIT p_limit OFFSET p_offset;
END $$

DELIMITER ;

-- 72 thủ tục truy vấn để thêm môn học
DELIMITER $$

CREATE PROCEDURE AddCourse(
    IN p_course_id INT,
    IN p_course_name VARCHAR(255),
    IN p_course_type_id INT
)
BEGIN
    INSERT INTO courses (course_id, course_name, course_type_id) 
    VALUES (p_course_id, p_course_name, p_course_type_id);
END $$

DELIMITER ;

-- 73 thủ tục truy vấn xóa khóa học
DELIMITER $$

CREATE PROCEDURE DeleteCourse(
    IN p_course_id INT
)
BEGIN
    DELETE FROM courses WHERE course_id = p_course_id;
END $$

DELIMITER ;

-- 74 thủ tục lấy thông tin khóa học từ cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE GetCourseById(
    IN p_course_id INT
)
BEGIN
    SELECT * FROM courses WHERE course_id = p_course_id;
END $$

DELIMITER ;

-- 75 thủ tục cập nhật dữ liệu khóa học
DELIMITER $$

CREATE PROCEDURE UpdateCourse(
    IN p_course_name VARCHAR(255),
    IN p_course_type_id INT,
    IN p_course_id INT
)
BEGIN
    UPDATE courses 
    SET course_name = p_course_name, 
        course_type_id = p_course_type_id 
    WHERE course_id = p_course_id;
END $$

DELIMITER ;

-- 76 thủ tục truy vấn để thêm học kỳ
DELIMITER $$

CREATE PROCEDURE AddSemester(
    IN p_semester_name VARCHAR(255),
    IN p_start_date DATE,
    IN p_end_date DATE,
    IN p_is_active BOOLEAN
)
BEGIN
    INSERT INTO semesters (semester_name, start_date, end_date, is_active) 
    VALUES (p_semester_name, p_start_date, p_end_date, p_is_active);
END $$

DELIMITER ;

-- 77 thủ tục truy vấn xóa học kỳ
DELIMITER $$

CREATE PROCEDURE DeleteSemester(
    IN p_semester_id INT
)
BEGIN
    DELETE FROM semesters WHERE semester_id = p_semester_id;
END $$

DELIMITER ;

-- 78 thủ tục lấy thông tin học kỳ từ cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE GetSemesterById(
    IN p_semester_id INT
)
BEGIN
    SELECT * FROM semesters WHERE semester_id = p_semester_id;
END $$

DELIMITER ;

-- 79
DELIMITER //

CREATE PROCEDURE InsertUser(
    IN p_user_id INT,
    IN p_username VARCHAR(255),
    IN p_password VARCHAR(255)
)
BEGIN
    INSERT INTO users (user_id, username, password)
    VALUES (p_user_id, p_username, p_password);
END //

DELIMITER ;

-- 80
DELIMITER //

CREATE PROCEDURE InsertUserRole(
    IN p_user_id INT,
    IN p_role_id INT
)
BEGIN
    INSERT INTO user_roles (user_id, role_id)
    VALUES (p_user_id, p_role_id);
END //

DELIMITER ;

-- 81
DELIMITER //

CREATE PROCEDURE InsertStudent(
    IN p_student_id INT,
    IN p_lastname VARCHAR(255),
    IN p_firstname VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_phone VARCHAR(20),
    IN p_class VARCHAR(50),
    IN p_birthday DATE,
    IN p_gender VARCHAR(10)
)
BEGIN
    INSERT INTO students (student_id, lastname, firstname, email, phone, class, birthday, gender)
    VALUES (p_student_id, p_lastname, p_firstname, p_email, p_phone, p_class, p_birthday, p_gender);
END //

DELIMITER ;

-- 82
DELIMITER //

CREATE PROCEDURE InsertTeacher(
    IN p_teacher_id INT,
    IN p_lastname VARCHAR(255),
    IN p_firstname VARCHAR(255),
    IN p_email VARCHAR(255),
    IN p_phone VARCHAR(20),
    IN p_birthday DATE,
    IN p_gender VARCHAR(10)
)
BEGIN
    INSERT INTO teachers (teacher_id, lastname, firstname, email, phone, birthday, gender)
    VALUES (p_teacher_id, p_lastname, p_firstname, p_email, p_phone, p_birthday, p_gender);
END //

DELIMITER ;


-- 83
DELIMITER $$

CREATE PROCEDURE GetAdminById(
    IN p_admin_id INT
)
BEGIN
    SELECT 
        admin_id, 
        lastname, 
        firstname, 
        email, 
        phone 
    FROM 
        admins 
    WHERE 
        admin_id = p_admin_id;
END $$

DELIMITER ;

-- 84
DELIMITER $$

CREATE PROCEDURE UpdateAdmin(
    IN p_admin_id INT,
    IN p_lastname VARCHAR(50),
    IN p_firstname VARCHAR(50),
    IN p_email VARCHAR(100),
    IN p_phone VARCHAR(15)
)
BEGIN
    UPDATE admins 
    SET 
        lastname = p_lastname, 
        firstname = p_firstname, 
        email = p_email, 
        phone = p_phone 
    WHERE 
        admin_id = p_admin_id;
END $$

DELIMITER ;

-- 85
DELIMITER $$

CREATE PROCEDURE GetAllAdmins()
BEGIN
    SELECT 
        admin_id, 
        lastname, 
        firstname, 
        email, 
        phone 
    FROM 
        admins;
END $$

DELIMITER ;

-- 86
DELIMITER //

CREATE PROCEDURE GetAnnouncementsByClassId(IN class_id INT)
BEGIN
    SELECT * 
    FROM announcements 
    WHERE class_id = class_id 
    ORDER BY created_at DESC;
END //

DELIMITER ;

-- 87
DELIMITER //

CREATE PROCEDURE GetCommentsByAnnouncementId(IN announcement_id INT)
BEGIN
    SELECT c.*, 
           COALESCE(t.lastname, s.lastname) AS lastname, 
           COALESCE(t.firstname, s.firstname) AS firstname
    FROM comments c
    LEFT JOIN teachers t ON c.user_id = t.teacher_id
    LEFT JOIN students s ON c.user_id = s.student_id
    WHERE c.announcement_id = announcement_id
    ORDER BY c.created_at ASC;
END //

DELIMITER ;

-- 88
DELIMITER //

CREATE PROCEDURE GetCommentCountByAnnouncementId(IN announcement_id INT, OUT comment_count INT)
BEGIN
    SELECT COUNT(*) INTO comment_count
    FROM comments
    WHERE announcement_id = announcement_id;
END //

DELIMITER ;

-89
DELIMITER $$

CREATE PROCEDURE GetStudentScheduleForTomorrow(IN tomorrow DATE)
BEGIN
    SELECT 
        st.email, 
        st.firstname, 
        st.lastname, 
        sc.date, 
        sc.start_time, 
        sc.end_time, 
        c.course_name
    FROM 
        students AS st
    JOIN 
        class_students AS cs ON st.student_id = cs.student_id
    JOIN 
        schedules AS sc ON cs.class_id = sc.class_id
    JOIN 
        classes AS cl ON sc.class_id = cl.class_id
    JOIN 
        courses AS c ON cl.course_id = c.course_id
    WHERE 
        sc.date = tomorrow;
END$$

DELIMITER ;

-90
DELIMITER $$

CREATE PROCEDURE CheckScheduleExists(IN class_id CHAR(36), IN schedule_date DATETIME, IN start_time INT, IN end_time INT, OUT exists_flag INT)
BEGIN
    SELECT COUNT(*) INTO exists_flag
    FROM schedules
    WHERE class_id = class_id 
    AND date = schedule_date
    AND start_time = start_time
    AND end_time = end_time;
END $$

DELIMITER ;