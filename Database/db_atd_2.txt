-- 1a
CREATE TABLE users (
    user_id INT(11) PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
-- 1b
CREATE TABLE roles (
    role_id INT(11) PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) UNIQUE NOT NULL
);
-- 1c
CREATE TABLE user_roles (
    user_id INT(11),
    role_id INT(11),
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE
);
-- 2
CREATE TABLE semesters (
    semester_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    semester_name VARCHAR(50) NOT NULL,
    is_active INT(2),
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
);
-- 3b
CREATE TABLE course_types (
    course_type_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    course_type_name VARCHAR(255) NOT NULL,
    credits INT NOT NULL,
    theory_periods INT NOT NULL,
    practice_periods INT NOT NULL
);
-- 3a
CREATE TABLE courses (
    course_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(255) NOT NULL,
    course_type_id INT(11),
    FOREIGN KEY (course_type_id) REFERENCES course_types(course_type_id) ON DELETE SET NULL
);
-- 4
CREATE TABLE students (
    student_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    lastname VARCHAR(50),
    firstname VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15),
    class VARCHAR(50),
    birthday DATE NOT NULL,
    gender ENUM('Nam', 'Nữ'),
    FOREIGN KEY (student_id) REFERENCES users(user_id) ON DELETE CASCADE
);
-- 5
CREATE TABLE teachers (
    teacher_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    lastname VARCHAR(50),
    firstname VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15),
    birthday DATE NOT NULL,
    gender ENUM('Nam', 'Nữ'),
    FOREIGN KEY (teacher_id) REFERENCES users(user_id) ON DELETE CASCADE
);
-- 6a
CREATE TABLE classes (
    class_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    class_name VARCHAR(255) NOT NULL,
    course_id INT(11),
    semester_id INT(11),
    teacher_id INT(11),
    CONSTRAINT fk_course_id FOREIGN KEY (course_id) REFERENCES courses(course_id),
    CONSTRAINT fk_teacher_id FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id),
    CONSTRAINT fk_semester_id FOREIGN KEY (semester_id) REFERENCES semesters(semester_id)
);
-- 6b
CREATE TABLE class_students (
    class_id CHAR(36) NOT NULL,
    student_id INT(11) NOT NULL,
    CONSTRAINT fk_class_student_class_id FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE,
    CONSTRAINT fk_class_student_student_id FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    PRIMARY KEY (class_id, student_id)
);
-- 7
CREATE TABLE schedules (
    schedule_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    class_id CHAR(36) NOT NULL,
    date DATE NOT NULL,
    start_time INT NOT NULL,
    end_time INT NOT NULL,	
    FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE
);
-- 8
CREATE TABLE attendances (
    attendance_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    schedule_id INT(11) NOT NULL,
    student_id INT(11) NOT NULL,
    status TINYINT(1) NOT NULL COMMENT '0: Absent, 1: Present, 2: Late',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_schedule_id FOREIGN KEY (schedule_id) REFERENCES schedules(schedule_id) ON DELETE CASCADE,
    CONSTRAINT fk_student_id FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    CONSTRAINT unique_attendance UNIQUE (schedule_id, student_id)
);
-- 9
CREATE TABLE attendance_reports (
    report_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    class_id CHAR(36) NOT NULL,
    student_id INT(11) NOT NULL,
    total_present INT DEFAULT 0,
    total_absent INT DEFAULT 0,
    total_late INT DEFAULT 0,
    CONSTRAINT fk_attendance_report_class_id FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE,
    CONSTRAINT fk_attendance_report_student_id FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE
);
