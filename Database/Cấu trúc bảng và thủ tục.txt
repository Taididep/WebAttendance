----------------------------------------------------------------------------------------------
-- 1a
CREATE TABLE users (
    user_id INT(11) PRIMARY KEY AUTO_INCREMENT,
    username VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL
);
-- 1b
CREATE TABLE roles (
    role_id INT(11) PRIMARY KEY AUTO_INCREMENT,
    role_name VARCHAR(50) UNIQUE NOT NULL
);
-- 1c
CREATE TABLE user_roles (
    user_id INT(11),
    role_id INT(11),
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(role_id) ON DELETE CASCADE
);
-- 2
CREATE TABLE semesters (
    semester_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    semester_name VARCHAR(50) NOT NULL,
    is_active INT(2),
    start_date DATE NOT NULL,
    end_date DATE NOT NULL
);
-- 3b
CREATE TABLE course_types (
    course_type_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    course_type_name VARCHAR(255) NOT NULL,
    credits INT NOT NULL,
    theory_periods INT NOT NULL,
    practice_periods INT NOT NULL
);
-- 3a
CREATE TABLE courses (
    course_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    course_name VARCHAR(255) NOT NULL,
    course_type_id INT(11),
    FOREIGN KEY (course_type_id) REFERENCES course_types(course_type_id) ON DELETE SET NULL
);
-- 4
CREATE TABLE students (
    student_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    lastname VARCHAR(50),
    firstname VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15),
    class VARCHAR(50),
    birthday DATE NOT NULL,
    gender ENUM('Nam', 'Nữ'),
    FOREIGN KEY (student_id) REFERENCES users(user_id) ON DELETE CASCADE
);
-- 5
CREATE TABLE teachers (
    teacher_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    lastname VARCHAR(50),
    firstname VARCHAR(50) NOT NULL,
    email VARCHAR(100),
    phone VARCHAR(15),
    birthday DATE NOT NULL,
    gender ENUM('Nam', 'Nữ'),
    FOREIGN KEY (teacher_id) REFERENCES users(user_id) ON DELETE CASCADE
);
-- 6a
CREATE TABLE classes (
    class_id CHAR(36) PRIMARY KEY DEFAULT (UUID()),
    class_name VARCHAR(255) NOT NULL,
    course_id INT(11),
    semester_id INT(11),
    teacher_id INT(11),
    CONSTRAINT fk_course_id FOREIGN KEY (course_id) REFERENCES courses(course_id),
    CONSTRAINT fk_teacher_id FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id),
    CONSTRAINT fk_semester_id FOREIGN KEY (semester_id) REFERENCES semesters(semester_id)
);
-- 6b
CREATE TABLE class_students (
    class_id CHAR(36) NOT NULL,
    student_id INT(11) NOT NULL,
    CONSTRAINT fk_class_student_class_id FOREIGN KEY (class_id) REFERENCES classes(class_id),
    CONSTRAINT fk_class_student_student_id FOREIGN KEY (student_id) REFERENCES students(student_id),
    PRIMARY KEY (class_id, student_id)
);
-- 7
CREATE TABLE schedules (
    schedule_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    class_id CHAR(36) NOT NULL,
    date DATE NOT NULL,
    start_time INT NOT NULL,
    end_time INT NOT NULL,	
    FOREIGN KEY (class_id) REFERENCES classes(class_id)
);
-- 8
CREATE TABLE attendances (
    attendance_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    schedule_id INT(11) NOT NULL,
    student_id INT(11) NOT NULL,
    status TINYINT(1) NOT NULL COMMENT '0: Absent, 1: Present, 2: Late',
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    CONSTRAINT fk_schedule_id FOREIGN KEY (schedule_id) REFERENCES schedules(schedule_id),
    CONSTRAINT fk_student_id FOREIGN KEY (student_id) REFERENCES students(student_id),
    CONSTRAINT unique_attendance UNIQUE (schedule_id, student_id)
);


-- 9
CREATE TABLE attendance_reports (
    report_id INT(11) AUTO_INCREMENT PRIMARY KEY,
    class_id CHAR(36) NOT NULL,
    student_id INT(11) NOT NULL,
    total_present INT DEFAULT 0,
    total_absent INT DEFAULT 0,
    total_late INT DEFAULT 0,
    CONSTRAINT fk_attendance_report_class_id FOREIGN KEY (class_id) REFERENCES classes(class_id),
    CONSTRAINT fk_attendance_report_student_id FOREIGN KEY (student_id) REFERENCES students(student_id)
);

----------------------------------------------------------------------------------------------
-- 1a
INSERT INTO roles (role_name) 
VALUES 
('admin'),
('teacher'),
('student');
INSERT INTO users (user_id, username, password) 
VALUES 
(2001216114, '2001216114', 'password'),
(2001210224, '2001210224', 'password'),
(2001211785, '2001211785', 'password'),
(2001212345, '2001212345', 'password'),
(2001213456, '2001213456', 'password'),
(2001214567, '2001214567', 'password'),
(2001215678, '2001215678', 'password'),
(2001216789, '2001216789', 'password'),
(2001217890, '2001217890', 'password'),
(2001218901, '2001218901', 'password'),
(2001219012, '2001219012', 'password'),
(2001210123, '2001210123', 'password'),
(2001211234, '2001211234', 'password'),
(2001212346, '2001212346', 'password'),
(2001213457, '2001213457', 'password'),
(2001214568, '2001214568', 'password'),
(2001215679, '2001215679', 'password'),
(2001216780, '2001216780', 'password'),
(2001217891, '2001217891', 'password'),
(2001218902, '2001218902', 'password');
INSERT INTO users (user_id, username, password) 
VALUES 
(1000001234, '1000001234', 'password'),
(1000001235, '1000001235', 'password'),
(1000001236, '1000001236', 'password');
-- 1c
INSERT INTO user_roles (user_id, role_id)
SELECT user_id, (SELECT role_id FROM roles WHERE role_name = 'student')
FROM users
WHERE user_id IN (
    2001216114, 2001210224, 2001211785, 2001212345, 2001213456, 
    2001214567, 2001215678, 2001216789, 2001217890, 2001218901, 
    2001219012, 2001210123, 2001211234, 2001212346, 2001213457, 
    2001214568, 2001215679, 2001216780, 2001217891, 2001218902
);
INSERT INTO user_roles (user_id, role_id)
SELECT user_id, (SELECT role_id FROM roles WHERE role_name = 'teacher')
FROM users
WHERE user_id IN (1000001234, 1000001235, 1000001236);
-- 2
INSERT INTO semesters (semester_name, is_active, start_date, end_date) 
VALUES
    ('HK3 (Hè 2023 - 2024)', 0 , '2024-07-10', '2024-08-07'),
    ('HK1 (2024 - 2025)', 1 , '2024-08-15', '2025-12-17');
-- 3b
INSERT INTO course_types (course_type_name, credits ,theory_periods, practice_periods) VALUES
('Lý thuyết', 1, 15, 0),
('Lý thuyết', 2, 30, 0),
('Lý thuyết', 3, 45, 0),
('Thực Hành', 1, 0, 30),
('Thực Hành', 2, 0, 60),
('Lý thuyết và Thực hành', 3, 15, 60);
-- 3a
INSERT INTO courses (course_name, course_type_id) VALUES 
('Nhập môn lập trình', 3),
('Thực hành nhập môn lập trình', 5),
('Kỹ năng ứng dụng Công nghệ Thông tin', 5),
('Giải tích', 3),
('Hệ điều hành', 3),
('Thực hành Hệ điều hành', 4),
('Kiến trúc máy tính', 3),
('Kỹ thuật lập trình', 3),
('Thực hành kỹ thuật lập trình', 4),
('Đại số tuyến tính', 3),
('Anh Văn 1', 3),
('Anh Văn 2', 3),
('Cấu trúc dữ liệu và giải thuật', 3),
('Mạng máy tính', 3),
('Thực hành cấu trúc dữ liệu và giải thuật', 4),
('Thực hành mạng máy tính', 4),
('Cấu trúc rời rạc', 3),
('Thực hành Cấu trúc rời rạc', 4),
('Phương pháp nghiên cứu khoa học', 3),
('Phân tích thiết kế thuật toán', 3),
('Thiết kế web', 6),
('Lập trình hướng đối tượng', 3),
('Thực hành lập trình hướng đối tượng', 4),
('Cơ sở dữ liệu', 3),
('Thực hành cơ sở dữ liệu', 4),
('Anh văn 3', 3),
('Hệ quản trị cơ sở dữ liệu', 3),
('Thực hành hệ quản trị cơ sở dữ liệu', 4),
('Lập trình Web', 6),
('Trí tuệ nhân tạo', 3),
('Thực hành trí tuệ nhân tạo', 4),
('Công Nghệ Java', 6),
('Phân tích thiết kế hệ thống thông tin', 3),
('Thực hành phân tích thiết kế hệ thống thông tin', 4),
('Lập trình mã nguồn mở', 6),
('Phát triển ứng dụng di động', 6),
('Ảo hóa và điện toán đám mây', 3),
('Công nghệ phần mềm nâng cao', 3),
('Kiểm định phần mềm', 3),
('Thực hành kiểm định phần mềm', 4),
('Phát triển phần mềm ứng dụng thông minh', 6);
-- 4
INSERT INTO students (student_id, lastname, firstname, email, phone, class, birthday, gender) 
VALUES 
(2001216114, 'Đinh Văn', 'Tài', 'dinhvantai079@gmail.com', '0901234578', '12DHTH02', '2003-03-30', 'Nam'),
(2001210224, 'Nguyễn Hữu', 'Thông', 'huuthong@gmail.com', '0901234567', '12DHTH14', '2003-03-15', 'Nam'),
(2001211785, 'Phùng Vĩnh', 'Luân', 'vinhluan171@gmail.com', '0902345678', '12DHTH07', '2003-07-22', 'Nam'),
(2001212345, 'Lê Minh', 'Cường', 'leminhcuong@gmail.com', '0903456789', '12DHTH03', '2003-02-11', 'Nam'),
(2001213456, 'Trương Thị', 'Lan', 'truongthilan@gmail.com', '0904567890', '12DHTH04', '2003-06-06', 'Nữ'),
(2001214567, 'Hoàng Văn', 'Linh', 'hoangvanlinh@gmail.com', '0905678901', '12DHTH05', '2003-04-08', 'Nam'),
(2001215678, 'Bùi Thị', 'Hồng', 'buithihong@gmail.com', '0906789012', '12DHTH06', '2003-12-19', 'Nữ'),
(2001216789, 'Vũ Văn', 'Bình', 'vuvanhbinh@gmail.com', '0907890123', '11DHTH07', '2002-10-10', 'Nam'),
(2001217890, 'Nguyễn Thị', 'Hoa', 'nguyenthihua@gmail.com', '0908901234', '11DHTH08', '2002-11-17', 'Nữ'),
(2001218901, 'Đặng Văn', 'Quân', 'dangvanquan@gmail.com', '0909012345', '11DHTH09', '2002-05-30', 'Nam'),
(2001219012, 'Lương Thị', 'Ngân', 'luongthingan@gmail.com', '0910123456', '12DHTH10', '2003-11-16', 'Nữ'),
(2001210123, 'Trần Văn', 'Tùng', 'tranvantung@gmail.com', '0911234567', '12DHTH11', '2003-03-01', 'Nam'),
(2001211234, 'Phạm Thị', 'Vân', 'phamthivan@gmail.com', '0912345678', '14DHTH12', '2005-10-17', 'Nữ'),
(2001212346, 'Hoàng Thị', 'Mai', 'hoangthimai@gmail.com', '0913456789', '13DHTH13', '2004-08-12', 'Nữ'),
(2001213457, 'Nguyễn Văn', 'Hùng', 'nguyenvanhung@gmail.com', '0914567890', '12DHTH14', '2002-05-05', 'Nam'),
(2001214568, 'Bùi Văn', 'Long', 'buivanlong@gmail.com', '0915678901', '13DHTH15', '2004-02-02', 'Nam'),
(2001215679, 'Lê Thị', 'Như', 'lethinh@gmail.com', '0916789012', '12DHTH16', '2003-11-11', 'Nữ'),
(2001216780, 'Trương Văn', 'Dũng', 'truongvandung@gmail.com', '0917890123', '12DHTH17', '2003-01-01', 'Nam'),
(2001217891, 'Vũ Thị', 'Hạnh', 'vuthihanh@gmail.com', '0918901234', '13DHTH18', '2004-05-17', 'Nữ'),
(2001218902, 'Đặng Thị', 'Thu', 'dangthithu@gmail.com', '0920123456', '13DHTH19', '2004-11-12', 'Nữ');
-- 5
INSERT INTO teachers (teacher_id, lastname, firstname, email, phone, birthday, gender) 
VALUES 
(1000001234, 'Trần Thị Vân', 'Anh', 'vanAnh123@example.com', '0903456789', '1995-01-01', 'Nữ'),
(1000001235, 'Trần Văn', 'Hùng', 'HungTV@example.com', '0903456790', '1990-01-01', 'Nam'),
(1000001236, 'Nguyễn Văn', 'Tùng', 'NguyenVT@example.com', '0904567890', '1992-01-01', 'Nam');
-- 6a
INSERT INTO classes (class_id, class_name, course_id, semester_id , teacher_id) 
VALUES 
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 'CSDL VanAnh', 25, 2, 1000001234);
-- 6b
INSERT INTO class_students (class_id, student_id) 
VALUES 
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001216114),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001210224),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001211785),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001212345),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001213456),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001214567),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001215678),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', 2001217890);

-- 7
INSERT INTO schedules (class_id, date, start_time, end_time) 
VALUES 
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-10-07', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-10-14', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-10-21', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-10-28', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-11-04', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-11-11', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-11-18', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-11-25', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-12-02', 1, 3),
('ee7262a0-84c9-11ef-bbd7-04421aee9db3', '2024-12-09', 1, 3);

-- 8






-- 1. Thủ tục trong login.php
DELIMITER //
CREATE PROCEDURE GetUserInfoByUsername(IN input_username VARCHAR(255))
BEGIN
    SELECT u.user_id, u.username, u.password, r.role_name 
    FROM users u
    JOIN user_roles ur ON u.user_id = ur.user_id
    JOIN roles r ON ur.role_id = r.role_id
    WHERE u.username = input_username;
END //
DELIMITER ;

-- 2. Thủ tục lấy tên giảng viên trong teacher.php
DELIMITER //
CREATE PROCEDURE GetTeacherInfo(IN teacher_id_param INT)
BEGIN
    SELECT lastname, firstname 
    FROM teachers 
    WHERE teacher_id = teacher_id_param;
END //
DELIMITER ;

-- 3. Thủ tục lấy tất cả học kỳ trong teacher.php
DELIMITER //
CREATE PROCEDURE GetAllSemesters()
BEGIN
    SELECT semester_id, semester_name 
    FROM semesters
    ORDER BY semester_id DESC;
END //
DELIMITER ;


-- 4. Thủ tục lấy danh sach lớp theo học kỳ và giảng viên trong teacher.php(get_classes.php)
DELIMITER //
CREATE PROCEDURE GetClassesBySemesterAndTeacher(IN semester_id INT, IN teacher_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name
    FROM classes c
    JOIN courses co ON c.course_id = co.course_id
    WHERE c.semester_id = semester_id AND c.teacher_id = teacher_id;
END //
DELIMITER ;



-- 5.Thủ tục lấy thông tin lớp (detail_class.php)
DELIMITER //
CREATE PROCEDURE GetClassDetailsById(IN classId CHAR(36))
BEGIN
    SELECT 
        c.class_id,
        c.class_name,
        s.semester_name,
        co.course_name,
        CONCAT(t.lastname, ' ', t.firstname) AS teacher_fullname
    FROM 
        classes c
    JOIN 
        semesters s ON c.semester_id = s.semester_id
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        teachers t ON c.teacher_id = t.teacher_id
    WHERE 
        c.class_id = classId;
END //


----------------------------------------------------------------------- Attendance
-- 6. Thủ Tục Lấy Thông Tin Sinh Viên Trong Lớp -- (attendance_view.php)
DELIMITER //

CREATE PROCEDURE GetStudentsByClassId(IN classId CHAR(36))
BEGIN
    SELECT s.student_id, s.lastname, s.firstname, s.class, s.birthday
    FROM students s
    JOIN class_students cs ON s.student_id = cs.student_id
    WHERE cs.class_id = classId;
END //

DELIMITER ;




-- 7. Thủ Tục Lấy Thông Tin Điểm Danh (attendance_view.php)
DELIMITER $$

CREATE PROCEDURE GetAttendanceByClassId(IN classId CHAR(36))
BEGIN
    SELECT sch.date, a.student_id, a.status 
    FROM schedules sch
    LEFT JOIN attendances a ON sch.schedule_id = a.schedule_id 
        AND a.student_id IN (SELECT student_id FROM class_students WHERE class_id = classId)
    WHERE sch.class_id = classId;
END $$

DELIMITER ;


-- 8. Thủ Tục Lấy Danh Sách Ngày Điểm Danh
DELIMITER //

CREATE PROCEDURE GetDistinctDatesByClassId(IN classId CHAR(36))
BEGIN
    SELECT DISTINCT date
    FROM schedules
    WHERE class_id = classId;
END //

DELIMITER ;



-- 9. Thủ Tục Lấy Thông Tin Lịch Học
DELIMITER //

CREATE PROCEDURE GetSchedulesByClassId(IN classId VARCHAR(36))
BEGIN
    SELECT schedule_id, date 
    FROM schedules 
    WHERE class_id = class_id;  
END //

DELIMITER ;





-- 10. Thủ Tục Lấy Thông Tin Điểm Danh
DELIMITER $$

CREATE PROCEDURE GetAttendanceByScheduleId(IN scheduleId INT, IN class_id CHAR(36))
BEGIN
    SELECT a.student_id, a.status
    FROM attendances a
    JOIN schedules s ON a.schedule_id = s.schedule_id
    WHERE a.schedule_id = scheduleId AND s.class_id = class_id;
END $$

DELIMITER ;




-- 11. Thủ tục cập nhật hoặc thêm mới điểm danh(process_attendance)
DELIMITER $$

CREATE PROCEDURE UpdateOrInsertAttendance(
    IN p_schedule_id INT,
    IN p_student_id INT,
    IN p_status INT
)
BEGIN
    DECLARE attendanceExists INT;
    
    -- Kiểm tra xem điểm danh đã tồn tại hay chưa
    SELECT COUNT(*) INTO attendanceExists
    FROM attendances
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
    
    IF attendanceExists > 0 THEN
        -- Nếu đã tồn tại, cập nhật trạng thái
        UPDATE attendances
        SET status = p_status
        WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
    ELSE
        -- Nếu chưa tồn tại, thêm mới
        INSERT INTO attendances (schedule_id, student_id, status)
        VALUES (p_schedule_id, p_student_id, p_status);
    END IF;
END$$

DELIMITER ;


-- 12. Thủ tục lấy danh sach lớp theo học kỳ và sinh viên trong student.php(get_classes.php)
DELIMITER //
CREATE PROCEDURE GetClassesBySemesterAndStudent(IN semester_id INT, IN student_id INT)
BEGIN
    SELECT 
        c.class_id, 
        c.class_name,
        co.course_name,
        t.lastname,
        t.firstname
    FROM classes c
    JOIN class_students cs ON c.class_id = cs.class_id
    JOIN courses co ON c.course_id = co.course_id
    JOIN teachers t ON c.teacher_id = t.teacher_id
    WHERE c.semester_id = semester_id AND cs.student_id = student_id;
END //
DELIMITER ;


-- 13. Thủ tục lấy lịch học của sinh viên
DELIMITER //

CREATE PROCEDURE GetStudentSchedules(
    IN startDate DATE,
    IN endDate DATE,
    IN semesterId INT,
    IN student_id INT
)
BEGIN
    SELECT 
        c.class_name,
        co.course_name,
        s.date,
        s.start_time,
        s.end_time,
        CASE 
            WHEN s.end_time < 7 THEN 'Sáng'
            WHEN s.end_time >= 7 AND s.end_time < 13 THEN 'Chiều'
            ELSE 'Tối'
        END AS ca_hoc 
    FROM 
        schedules s
    JOIN 
        classes c ON s.class_id = c.class_id
    JOIN 
        courses co ON c.course_id = co.course_id
    JOIN 
        class_students cs ON c.class_id = cs.class_id
    WHERE 
        s.date BETWEEN startDate AND endDate
        AND c.semester_id = semesterId
        AND cs.student_id = student_id
    ORDER BY 
        s.date, c.class_name;
END //

DELIMITER ;
 
-- 14. Thủ tục lấy lịch dạy của giảng viên
DELIMITER //

CREATE PROCEDURE GetTeacherSchedules(
    IN startDate DATE,
    IN endDate DATE,
    IN semesterId INT,
    IN teacher_id INT
)
BEGIN
    SELECT 
        c.class_name,
        co.course_name,
        s.date,
        s.start_time,
        s.end_time,
        CASE 
            WHEN s.end_time < 7 THEN 'Sáng'
            WHEN s.end_time >= 7 AND s.end_time < 13 THEN 'Chiều'
            ELSE 'Tối'
        END AS ca_hoc 
    FROM 
        schedules s
    JOIN 
        classes c ON s.class_id = c.class_id
    JOIN 
        courses co ON c.course_id = co.course_id
    WHERE 
        s.date BETWEEN startDate AND endDate
        AND c.semester_id = semesterId
        AND c.teacher_id = teacher_id -- Thêm điều kiện lọc theo teacher_id
    ORDER BY 
        s.date, c.class_name;
END //

DELIMITER ;

-- 15. Thủ tục lấy thông tin sinh viên trong lớp
DELIMITER $$

CREATE PROCEDURE GetStudentsByClassIdAndStudentId (
    IN classId CHAR(36),
    IN studentId INT
)
BEGIN
    SELECT s.*
    FROM students s
    JOIN class_students cs ON s.student_id = cs.student_id
    WHERE cs.class_id = classId AND s.student_id = studentId;
END$$

DELIMITER ;



