------  Sinh Viên ------ 

-- 1 thủ tục lấy thông tin
DELIMITER $$

CREATE PROCEDURE GetStudentById(IN student_id_param INT)
BEGIN
    SELECT * FROM students WHERE student_id = student_id_param;
END $$

DELIMITER ;

-- 2 thủ tục cập nhật thông tin
DELIMITER $$

CREATE PROCEDURE UpdateStudentInfo(
    IN p_student_id INT,
    IN p_lastname VARCHAR(50),
    IN p_firstname VARCHAR(50),
    IN p_birthday DATE,
    IN p_gender ENUM('Nam', 'Nữ'),
    IN p_email VARCHAR(100),
    IN p_phone VARCHAR(15)
)
BEGIN
    UPDATE students 
    SET 
        lastname = p_lastname,
        firstname = p_firstname,
        birthday = p_birthday,
        gender = p_gender,
        email = p_email,
        phone = p_phone
    WHERE 
        student_id = p_student_id;
END $$

DELIMITER ;

-- 3 thủ tục kiểm tra xem class_id có tồn tại không
DELIMITER $$

CREATE PROCEDURE GetClassById(IN p_class_id CHAR(36))
BEGIN
    SELECT class_id FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 4 thủ tục kiểm tra sinh viên đã tham gia lớp học này chưa
DELIMITER $$

CREATE PROCEDURE GetStudentClassStatus(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    SELECT status FROM class_students 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 5 thủ tục nếu chưa kích hoạt, cập nhật status thành 1
DELIMITER $$

CREATE PROCEDURE UpdateStudentClassStatus(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    UPDATE class_students 
    SET status = 1 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 6 thủ tục lấy thông tin điểm danh của sinh viên trong lớp
DELIMITER $$

CREATE PROCEDURE GetAttendanceReport(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    SELECT total_present, total_absent, total_late, total 
    FROM attendance_reports 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 7 thủ tục cập nhật trạng thái lớp học thành 0
DELIMITER $$

CREATE PROCEDURE UpdateStudentClassStatusToInactive(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    UPDATE class_students 
    SET status = 0 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 8 thủ tục lấy thông tin ngày giờ buổi học từ bảng schedules
DELIMITER $$

CREATE PROCEDURE GetScheduleDate(
    IN p_schedule_id INT
)
BEGIN
    SELECT date FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 9 thủ tục kiểm tra xem điểm danh đã tồn tại hay chưa
DELIMITER $$

CREATE PROCEDURE GetAttendanceRecord(
    IN p_schedule_id INT,
    IN p_student_id INT
)
BEGIN
    SELECT * FROM attendances 
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 10 thủ tục nếu đã tồn tại, cập nhật trạng thái
DELIMITER $$

CREATE PROCEDURE UpdateAttendanceStatus(
    IN p_status TINYINT,
    IN p_schedule_id INT,
    IN p_student_id INT
)
BEGIN
    UPDATE attendances 
    SET status = p_status 
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 11 thủ tục nếu chưa tồn tại, thêm mới
DELIMITER $$

CREATE PROCEDURE InsertAttendanceRecord(
    IN p_schedule_id INT,
    IN p_student_id INT,
    IN p_status TINYINT
)
BEGIN
    INSERT INTO attendances (schedule_id, student_id, status) 
    VALUES (p_schedule_id, p_student_id, p_status);
END $$

DELIMITER ;

-- 12 thủ tục lấy thông tin lớp học
DELIMITER $$

CREATE PROCEDURE GetClassNameById(
    IN p_class_id CHAR(8)
)
BEGIN
    SELECT class_name FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 13 thủ tục lấy thông tin status và date của lịch học
DELIMITER $$

CREATE PROCEDURE GetScheduleStatusAndDate(
    IN p_schedule_id INT
)
BEGIN
    SELECT status, date FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 14 thủ tục kiểm tra xem nội dung bình luận có rỗng không
DELIMITER $$

CREATE PROCEDURE InsertComment(
    IN p_announcement_id INT,
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO comments (announcement_id, user_id, content) 
    VALUES (p_announcement_id, p_user_id, p_content);
END $$

DELIMITER ;



------ Account ------ 
-- 15 thủ tục lấy tất cả người dùng với mật khẩu hiện tại
DELIMITER $$

CREATE PROCEDURE GetAllUsers()
BEGIN
    SELECT user_id, password FROM users;
END $$

DELIMITER ;

-- 16 thủ tục cập nhật mật khẩu đã mã hóa vào cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE UpdateUserPassword(
    IN p_hashed_password VARCHAR(255),
    IN p_user_id INT
)
BEGIN
    UPDATE users 
    SET password = p_hashed_password 
    WHERE user_id = p_user_id;
END $$

DELIMITER ;

-- 17 thủ tục Check current password
DELIMITER $$

CREATE PROCEDURE GetPasswordByUsername(
    IN p_username VARCHAR(255)
)
BEGIN
    SELECT password FROM users WHERE username = p_username;
END $$

DELIMITER ;

-- 18 thủ tục kiểm tra nếu username (tên đăng nhập) và email tồn tại và khớp trong bảng sinh viên hoặc giáo viên
DELIMITER $$

CREATE PROCEDURE GetUserByEmailAndUsername(
    IN p_email VARCHAR(255),
    IN p_username VARCHAR(255)
)
BEGIN
    SELECT 'student' AS user_type, student_id AS id, email 
    FROM db_atd.students 
    WHERE email = p_email 
      AND student_id = (SELECT user_id FROM db_atd.users WHERE username = p_username)
    UNION
    SELECT 'teacher' AS user_type, teacher_id AS id, email 
    FROM db_atd.teachers 
    WHERE email = p_email 
      AND teacher_id = (SELECT user_id FROM db_atd.users WHERE username = p_username);
END $$

DELIMITER ;

-- 19 thủ tục để lấy danh sách lịch dạy của giảng viên vào ngày mai
DELIMITER $$

CREATE PROCEDURE GetTeachingSchedulesByDate(
    IN p_date DATE
)
BEGIN
    SELECT t.email, t.firstname, t.lastname, s.date, s.start_time, s.end_time, c.class_name
    FROM teachers t
    JOIN classes c ON t.teacher_id = c.teacher_id
    JOIN schedules s ON c.class_id = s.class_id
    WHERE s.date = p_date
    ORDER BY t.email, s.start_time;
END $$

DELIMITER ;

-- 20 thủ tục để lấy danh sách lịch học của sinh viên vào ngày mai
DELIMITER $$

CREATE PROCEDURE GetStudentSchedulesByDate(
    IN p_date DATE
)
BEGIN
    SELECT students.email, students.firstname, schedules.date, schedules.start_time, schedules.end_time 
    FROM students
    JOIN attendances ON students.student_id = attendances.student_id
    JOIN schedules ON schedules.schedule_id = attendances.schedule_id
    WHERE schedules.date = p_date
    ORDER BY students.email, schedules.start_time;
END $$

DELIMITER ;


------ Teacher------ 

-- 21 thủ tục kiểm tra xem nội dung bình luận có rỗng không
DELIMITER $$

CREATE PROCEDURE AddComment(
    IN p_announcement_id INT,
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO comments (announcement_id, user_id, content) VALUES (p_announcement_id, p_user_id, p_content);
END $$

DELIMITER ;

-- 22 thủ tục Truy vấn bảng tin
DELIMITER $$

CREATE PROCEDURE GetAnnouncementsByClass(
    IN p_class_id INT
)
BEGIN
    SELECT * FROM announcements WHERE class_id = p_class_id ORDER BY created_at DESC;
END $$

DELIMITER ;

-- 23 thủ tục Kiểm tra nếu có bình luận
DELIMITER $$

CREATE PROCEDURE GetCommentCountByAnnouncement(
    IN p_announcement_id INT,
    OUT p_comment_count INT
)
BEGIN
    SELECT COUNT(*) INTO p_comment_count FROM comments WHERE announcement_id = p_announcement_id;
END $$

DELIMITER ;

-- 24 thủ tục GetCommentsByAnnouncement bình luận
DELIMITER $$

CREATE PROCEDURE GetCommentsByAnnouncement(
    IN p_announcement_id INT
)
BEGIN
    SELECT c.*, 
           COALESCE(t.lastname, s.lastname) AS lastname, 
           COALESCE(t.firstname, s.firstname) AS firstname
    FROM comments c
    LEFT JOIN teachers t ON c.user_id = t.teacher_id
    LEFT JOIN students s ON c.user_id = s.student_id
    WHERE c.announcement_id = p_announcement_id
    ORDER BY c.created_at ASC;
END $$

DELIMITER ;

-- 25 thủ tục lưu thông báo vào cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE AddAnnouncement(
    IN p_class_id INT,
    IN p_title VARCHAR(255),
    IN p_content TEXT
)
BEGIN
    INSERT INTO announcements (class_id, title, content) VALUES (p_class_id, p_title, p_content);
END $$

DELIMITER ;

-- 26 thủ tục Truy vấn xóa thông báo
DELIMITER $$

CREATE PROCEDURE DeleteAnnouncement(
    IN p_announcement_id INT,
    IN p_class_id INT
)
BEGIN
    DELETE FROM announcements WHERE announcement_id = p_announcement_id AND class_id = p_class_id;
END $$

DELIMITER ;

-- 27 thủ tục UpdateAnnouncementContent
DELIMITER $$

CREATE PROCEDURE UpdateAnnouncementContent(
    IN p_announcement_id INT,
    IN p_content TEXT
)
BEGIN
    UPDATE announcements SET content = p_content WHERE announcement_id = p_announcement_id;
END $$

DELIMITER ;

-- 28 thủ tục UpdateAnnouncementTitle
DELIMITER $$

CREATE PROCEDURE UpdateAnnouncementTitle(
    IN p_announcement_id INT,
    IN p_title VARCHAR(255)
)
BEGIN
    UPDATE announcements SET title = p_title WHERE announcement_id = p_announcement_id;
END $$

DELIMITER ;


------ Admin ------ 

-- 29 thủ tục Truy vấn tổng số khóa học
DELIMITER $$

CREATE PROCEDURE GetTotalCoursesCount(
    OUT p_total INT
)
BEGIN
    SELECT COUNT(*) INTO p_total FROM courses;
END $$

DELIMITER ;

-- 30 thủ tục Truy vấn danh sách khóa học với giới hạn số lượng
DELIMITER $$

CREATE PROCEDURE GetCourses(
    IN p_limit INT,
    IN p_offset INT
)
BEGIN
    SELECT 
        c.course_id,
        c.course_name,
        ct.course_type_name,
        ct.credits,
        ct.theory_periods,
        ct.practice_periods
    FROM 
        courses c
    LEFT JOIN 
        course_types ct ON c.course_type_id = ct.course_type_id
    LIMIT p_limit OFFSET p_offset;
END $$

DELIMITER ;

-- 31 thủ tục truy vấn để thêm môn học
DELIMITER $$

CREATE PROCEDURE AddCourse(
    IN p_course_id INT,
    IN p_course_name VARCHAR(255),
    IN p_course_type_id INT
)
BEGIN
    INSERT INTO courses (course_id, course_name, course_type_id) 
    VALUES (p_course_id, p_course_name, p_course_type_id);
END $$

DELIMITER ;

-- 32 thủ tục truy vấn xóa khóa học
DELIMITER $$

CREATE PROCEDURE DeleteCourse(
    IN p_course_id INT
)
BEGIN
    DELETE FROM courses WHERE course_id = p_course_id;
END $$

DELIMITER ;

-- 33 thủ tục lấy thông tin khóa học từ cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE GetCourseById(
    IN p_course_id INT
)
BEGIN
    SELECT * FROM courses WHERE course_id = p_course_id;
END $$

DELIMITER ;

-- 33 thủ tục cập nhật dữ liệu khóa học
DELIMITER $$

CREATE PROCEDURE UpdateCourse(
    IN p_course_name VARCHAR(255),
    IN p_course_type_id INT,
    IN p_course_id INT
)
BEGIN
    UPDATE courses 
    SET course_name = p_course_name, 
        course_type_id = p_course_type_id 
    WHERE course_id = p_course_id;
END $$

DELIMITER ;

-- 34 thủ tục truy vấn để thêm học kỳ
DELIMITER $$

CREATE PROCEDURE AddSemester(
    IN p_semester_name VARCHAR(255),
    IN p_start_date DATE,
    IN p_end_date DATE,
    IN p_is_active BOOLEAN
)
BEGIN
    INSERT INTO semesters (semester_name, start_date, end_date, is_active) 
    VALUES (p_semester_name, p_start_date, p_end_date, p_is_active);
END $$

DELIMITER ;

-- 35 thủ tục truy vấn xóa học kỳ
DELIMITER $$

CREATE PROCEDURE DeleteSemester(
    IN p_semester_id INT
)
BEGIN
    DELETE FROM semesters WHERE semester_id = p_semester_id;
END $$

DELIMITER ;


----------------------- THÊM ---------------------

-- 36 thủ tục lấy thông tin học kỳ từ cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE GetSemesterById(
    IN p_semester_id INT
)
BEGIN
    SELECT * FROM semesters WHERE semester_id = p_semester_id;
END $$

DELIMITER ;

-- 37 thủ tục thông tin
DELIMITER $$

CREATE PROCEDURE GetAdminById(
    IN p_admin_id INT
)
BEGIN
    SELECT 
        admin_id, 
        lastname, 
        firstname, 
        email, 
        phone 
    FROM 
        admins 
    WHERE 
        admin_id = p_admin_id;
END $$

DELIMITER ;

-- 38 thủ tục cập nhật thông tin
DELIMITER $$

CREATE PROCEDURE UpdateAdmin(
    IN p_admin_id INT,
    IN p_lastname VARCHAR(50),
    IN p_firstname VARCHAR(50),
    IN p_email VARCHAR(100),
    IN p_phone VARCHAR(15)
)
BEGIN
    UPDATE admins 
    SET 
        lastname = p_lastname, 
        firstname = p_firstname, 
        email = p_email, 
        phone = p_phone 
    WHERE 
        admin_id = p_admin_id;
END $$

DELIMITER ;

-- 39 thủ tục
DELIMITER $$

CREATE PROCEDURE GetAllAdmins()
BEGIN
    SELECT 
        admin_id, 
        lastname, 
        firstname, 
        email, 
        phone 
    FROM 
        admins;
END $$

DELIMITER ;

-- 14+ thủ tục truy vấn bảng tin
DELIMITER //

CREATE PROCEDURE GetAnnouncementsByClassId(IN class_id INT)
BEGIN
    SELECT * 
    FROM announcements 
    WHERE class_id = class_id 
    ORDER BY created_at DESC;
END //

DELIMITER ;

-- 14+ thủ tục truy vấn bình luận từ giáo viên và học sinh
DELIMITER //

CREATE PROCEDURE GetCommentsByAnnouncementId(IN announcement_id INT)
BEGIN
    SELECT c.*, 
           COALESCE(t.lastname, s.lastname) AS lastname, 
           COALESCE(t.firstname, s.firstname) AS firstname
    FROM comments c
    LEFT JOIN teachers t ON c.user_id = t.teacher_id
    LEFT JOIN students s ON c.user_id = s.student_id
    WHERE c.announcement_id = announcement_id
    ORDER BY c.created_at ASC;
END //

DELIMITER ;

-- 14+ thủ tục kiểm tra nếu có bình luận
DELIMITER //

CREATE PROCEDURE GetCommentCountByAnnouncementId(IN announcement_id INT, OUT comment_count INT)
BEGIN
    SELECT COUNT(*) INTO comment_count
    FROM comments
    WHERE announcement_id = announcement_id;
END //

DELIMITER ;
























