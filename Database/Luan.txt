------  Sinh Viên ------ 

-- 1 thủ tục lấy thông tin
DELIMITER $$

CREATE PROCEDURE GetStudentById(IN student_id_param INT)
BEGIN
    SELECT * FROM students WHERE student_id = student_id_param;
END $$

DELIMITER ;

-- 2 thủ tục cập nhật thông tin
DELIMITER $$

CREATE PROCEDURE UpdateStudentInfo(
    IN p_student_id INT,
    IN p_lastname VARCHAR(50),
    IN p_firstname VARCHAR(50),
    IN p_birthday DATE,
    IN p_gender ENUM('Nam', 'Nữ'),
    IN p_email VARCHAR(100),
    IN p_phone VARCHAR(15)
)
BEGIN
    UPDATE students 
    SET 
        lastname = p_lastname,
        firstname = p_firstname,
        birthday = p_birthday,
        gender = p_gender,
        email = p_email,
        phone = p_phone
    WHERE 
        student_id = p_student_id;
END $$

DELIMITER ;

-- 3 thủ tục kiểm tra xem class_id có tồn tại không
DELIMITER $$

CREATE PROCEDURE GetClassById(IN p_class_id CHAR(36))
BEGIN
    SELECT class_id FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 4 thủ tục kiểm tra sinh viên đã tham gia lớp học này chưa
DELIMITER $$

CREATE PROCEDURE GetStudentClassStatus(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    SELECT status FROM class_students 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 5 thủ tục nếu chưa kích hoạt, cập nhật status thành 1
DELIMITER $$

CREATE PROCEDURE UpdateStudentClassStatus(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    UPDATE class_students 
    SET status = 1 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 6 thủ tục lấy thông tin điểm danh của sinh viên trong lớp
DELIMITER $$

CREATE PROCEDURE GetAttendanceReport(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    SELECT total_present, total_absent, total_late, total 
    FROM attendance_reports 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 7 thủ tục cập nhật trạng thái lớp học thành 0
DELIMITER $$

CREATE PROCEDURE UpdateStudentClassStatusToInactive(
    IN p_class_id CHAR(36),
    IN p_student_id INT
)
BEGIN
    UPDATE class_students 
    SET status = 0 
    WHERE class_id = p_class_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 8 thủ tục lấy thông tin ngày giờ buổi học từ bảng schedules
DELIMITER $$

CREATE PROCEDURE GetScheduleDate(
    IN p_schedule_id INT
)
BEGIN
    SELECT date FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 9 thủ tục kiểm tra xem điểm danh đã tồn tại hay chưa
DELIMITER $$

CREATE PROCEDURE GetAttendanceRecord(
    IN p_schedule_id INT,
    IN p_student_id INT
)
BEGIN
    SELECT * FROM attendances 
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 10 thủ tục nếu đã tồn tại, cập nhật trạng thái
DELIMITER $$

CREATE PROCEDURE UpdateAttendanceStatus(
    IN p_status TINYINT,
    IN p_schedule_id INT,
    IN p_student_id INT
)
BEGIN
    UPDATE attendances 
    SET status = p_status 
    WHERE schedule_id = p_schedule_id AND student_id = p_student_id;
END $$

DELIMITER ;

-- 11 thủ tục nếu chưa tồn tại, thêm mới
DELIMITER $$

CREATE PROCEDURE InsertAttendanceRecord(
    IN p_schedule_id INT,
    IN p_student_id INT,
    IN p_status TINYINT
)
BEGIN
    INSERT INTO attendances (schedule_id, student_id, status) 
    VALUES (p_schedule_id, p_student_id, p_status);
END $$

DELIMITER ;

-- 12 thủ tục lấy thông tin lớp học
DELIMITER $$

CREATE PROCEDURE GetClassNameById(
    IN p_class_id CHAR(8)
)
BEGIN
    SELECT class_name FROM classes WHERE class_id = p_class_id;
END $$

DELIMITER ;

-- 13 thủ tục lấy thông tin status và date của lịch học
DELIMITER $$

CREATE PROCEDURE GetScheduleStatusAndDate(
    IN p_schedule_id INT
)
BEGIN
    SELECT status, date FROM schedules WHERE schedule_id = p_schedule_id;
END $$

DELIMITER ;

-- 14 thủ tục kiểm tra xem nội dung bình luận có rỗng không
DELIMITER $$

CREATE PROCEDURE InsertComment(
    IN p_announcement_id INT,
    IN p_user_id INT,
    IN p_content TEXT
)
BEGIN
    INSERT INTO comments (announcement_id, user_id, content) 
    VALUES (p_announcement_id, p_user_id, p_content);
END $$

DELIMITER ;


------ Account ------ 
-- 15 thủ tục lấy tất cả người dùng với mật khẩu hiện tại
DELIMITER $$

CREATE PROCEDURE GetAllUsers()
BEGIN
    SELECT user_id, password FROM users;
END $$

DELIMITER ;

-- 16 thủ tục cập nhật mật khẩu đã mã hóa vào cơ sở dữ liệu
DELIMITER $$

CREATE PROCEDURE UpdateUserPassword(
    IN p_hashed_password VARCHAR(255),
    IN p_user_id INT
)
BEGIN
    UPDATE users 
    SET password = p_hashed_password 
    WHERE user_id = p_user_id;
END $$

DELIMITER ;

-- 17 thủ tục Check current password
DELIMITER $$

CREATE PROCEDURE GetPasswordByUsername(
    IN p_username VARCHAR(255)
)
BEGIN
    SELECT password FROM users WHERE username = p_username;
END $$

DELIMITER ;

-- 18 thủ tục kiểm tra nếu username (tên đăng nhập) và email tồn tại và khớp trong bảng sinh viên hoặc giáo viên
DELIMITER $$

CREATE PROCEDURE GetUserByEmailAndUsername(
    IN p_email VARCHAR(255),
    IN p_username VARCHAR(255)
)
BEGIN
    SELECT 'student' AS user_type, student_id AS id, email 
    FROM db_atd.students 
    WHERE email = p_email 
      AND student_id = (SELECT user_id FROM db_atd.users WHERE username = p_username)
    UNION
    SELECT 'teacher' AS user_type, teacher_id AS id, email 
    FROM db_atd.teachers 
    WHERE email = p_email 
      AND teacher_id = (SELECT user_id FROM db_atd.users WHERE username = p_username);
END $$

DELIMITER ;

-- 19 thủ tục để lấy danh sách lịch dạy của giảng viên vào ngày mai
DELIMITER $$

CREATE PROCEDURE GetTeachingSchedulesByDate(
    IN p_date DATE
)
BEGIN
    SELECT t.email, t.firstname, t.lastname, s.date, s.start_time, s.end_time, c.class_name
    FROM teachers t
    JOIN classes c ON t.teacher_id = c.teacher_id
    JOIN schedules s ON c.class_id = s.class_id
    WHERE s.date = p_date
    ORDER BY t.email, s.start_time;
END $$

DELIMITER ;

-- 20 thủ tục để lấy danh sách lịch học của sinh viên vào ngày mai
DELIMITER $$

CREATE PROCEDURE GetStudentSchedulesByDate(
    IN p_date DATE
)
BEGIN
    SELECT students.email, students.firstname, schedules.date, schedules.start_time, schedules.end_time 
    FROM students
    JOIN attendances ON students.student_id = attendances.student_id
    JOIN schedules ON schedules.schedule_id = attendances.schedule_id
    WHERE schedules.date = p_date
    ORDER BY students.email, schedules.start_time;
END $$

DELIMITER ;














































